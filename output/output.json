{
    "Programs": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface Program {\n    sourceType: \"script\" | \"module\";\n    body: [ Statement | ModuleDeclaration ];\n}\n"
                    ],
                    "Parsers must specify ",
                    [
                        "inlinecode",
                        "sourceType"
                    ],
                    " as ",
                    [
                        "inlinecode",
                        "\"module\""
                    ],
                    " if the source has been parsed as an ES6 module. Otherwise, ",
                    [
                        "inlinecode",
                        "sourceType"
                    ],
                    " must be ",
                    [
                        "inlinecode",
                        "\"script\""
                    ],
                    "."
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface Program <: Node {\n    type: \"Program\";\n    body: [ Directive | Statement ];\n}\n"
                    ],
                    "A complete program source tree."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Functions": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface Function {\n    generator: boolean;\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface Function <: Node {\n    id: Identifier | null;\n    params: [ Pattern ];\n    body: FunctionBody;\n}\n"
                    ],
                    "A function ",
                    [
                        "link",
                        {
                            "href": "#functiondeclaration"
                        },
                        "declaration"
                    ],
                    " or ",
                    [
                        "link",
                        {
                            "href": "#functionexpression"
                        },
                        "expression"
                    ],
                    "."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface Function {\n    returnType: TypeAnnotation | null;\n}\n"
                    ],
                    "The ",
                    [
                        "inlinecode",
                        "returnType"
                    ],
                    " property is used to specify the type annotation for the return value of the function."
                ],
                "file": "/extensions/type-annotations.md"
            }
        ],
        "children": []
    },
    "Statements": {
        "content": [
            {
                "content": [],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ForOfStatement {\n  await: boolean;\n}\n"
                    ],
                    [
                        "inlinecode",
                        "for-await-of"
                    ],
                    " statements, e.g., ",
                    [
                        "inlinecode",
                        "for await (const x of xs) {"
                    ]
                ],
                "file": "/es2018.md"
            },
            {
                "content": [],
                "file": "/es2019.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface Statement <: Node { }\n"
                    ],
                    "Any statement."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/ForOfStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ForOfStatement <: ForInStatement {\n    type: \"ForOfStatement\";\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ForOfStatement <: ForInStatement {\n    type: \"ForOfStatement\";\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Declarations": {
        "content": [
            {
                "content": [],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface Declaration <: Statement { }\n"
                    ],
                    "Any declaration node. Note that declarations are considered statements; this is because declarations can appear in any statement context."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Declarations/VariableDeclaration": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface VariableDeclaration {\n    kind: \"var\" | \"let\" | \"const\";\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface VariableDeclaration {\n    kind: \"var\" | \"let\" | \"const\";\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface VariableDeclaration <: Declaration {\n    type: \"VariableDeclaration\";\n    declarations: [ VariableDeclarator ];\n    kind: \"var\";\n}\n"
                    ],
                    "A variable declaration."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        ""
                    ],
                    "`js\ninterface Super <: Node {\n    type: \"Super\";\n}",
                    "extend interface CallExpression {\n    callee: Expression | Super;\n    arguments: ",
                    [
                        "link_ref",
                        {
                            "ref": " expression | spreadelement ",
                            "original": "[ Expression | SpreadElement ]"
                        },
                        " Expression | SpreadElement "
                    ],
                    ";\n}",
                    "extend interface MemberExpression {\n    object: Expression | Super;\n}\n",
                    [
                        "inlinecode",
                        ""
                    ],
                    "`",
                    "A ",
                    [
                        "inlinecode",
                        "super"
                    ],
                    " pseudo-expression.",
                    [
                        "inlinecode",
                        ""
                    ],
                    "`js\ninterface SpreadElement <: Node {\n    type: \"SpreadElement\";\n    argument: Expression;\n}",
                    "extend interface ArrayExpression {\n    elements: ",
                    [
                        "link_ref",
                        {
                            "ref": " expression | spreadelement | null ",
                            "original": "[ Expression | SpreadElement | null ]"
                        },
                        " Expression | SpreadElement | null "
                    ],
                    ";\n}",
                    "extend interface NewExpression {\n    arguments: ",
                    [
                        "link_ref",
                        {
                            "ref": " expression | spreadelement ",
                            "original": "[ Expression | SpreadElement ]"
                        },
                        " Expression | SpreadElement "
                    ],
                    ";\n}\n",
                    [
                        "inlinecode",
                        ""
                    ],
                    "`",
                    "Spread expression, e.g., ",
                    [
                        "inlinecode",
                        "[head, ...iter, tail]"
                    ],
                    ", ",
                    [
                        "inlinecode",
                        "f(head, ...iter, ...tail)"
                    ],
                    ".",
                    [
                        "strong",
                        "FIXME:"
                    ],
                    " This describes the Esprima and Acorn behaviors, which is not currently aligned with the SpiderMonkey behavior.",
                    [
                        "inlinecode",
                        "js\nextend interface AssignmentExpression {\n    left: Pattern;\n}\n"
                    ],
                    "Note that pre-ES6 code was allowed ",
                    [
                        "link",
                        {
                            "href": "https://github.com/estree/estree/pull/20#issuecomment-74584758"
                        },
                        "to pass references around"
                    ],
                    " and so ",
                    [
                        "inlinecode",
                        "left"
                    ],
                    " was much more liberal; an implementation might choose to continue using ",
                    [
                        "link",
                        {
                            "href": "https://github.com/estree/estree/blob/master/es5.md#assignmentexpression"
                        },
                        "old definition"
                    ],
                    " if it needs to support such legacy code.",
                    [
                        "inlinecode",
                        "js\nextend interface Property {\n    key: Expression;\n    method: boolean;\n    shorthand: boolean;\n    computed: boolean;\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ObjectExpression {\n    properties: [ Property | SpreadElement ];\n}\n"
                    ],
                    "Spread properties, e.g., ",
                    [
                        "inlinecode",
                        "{a: 1, ...obj, b: 2}"
                    ],
                    "."
                ],
                "file": "/es2018.md"
            },
            {
                "content": [],
                "file": "/es2020.md"
            },
            {
                "content": [],
                "file": "/es2021.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface Expression <: Node { }\n"
                    ],
                    "Any expression node. Since the left-hand side of an assignment may be any expression in general, an expression can also be a pattern."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/ArrowFunctionExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ArrowFunctionExpression <: Function, Expression {\n    type: \"ArrowFunctionExpression\";\n    body: FunctionBody | Expression;\n    expression: boolean;\n    generator: false;\n}\n"
                    ],
                    "A fat arrow function expression, e.g., ",
                    [
                        "inlinecode",
                        "let foo = (bar) => { /* body */ }"
                    ],
                    "."
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ArrowFunctionExpression <: Function, Expression {\n    type: \"ArrowFunctionExpression\";\n    body: FunctionBody | Expression;\n    expression: boolean;\n    generator: false;\n}\n"
                    ],
                    "A fat arrow function expression, e.g., ",
                    [
                        "inlinecode",
                        "let foo = (bar) => { /* body */ }"
                    ],
                    "."
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Expressions/YieldExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface YieldExpression <: Expression {\n    type: \"YieldExpression\";\n    argument: Expression | null;\n    delegate: boolean;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "yield"
                    ],
                    " expression."
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Template Literals": {
        "content": [
            {
                "content": [],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface TemplateElement {\n    value: {\n        cooked: string | null;\n        raw: string;\n    };\n}\n"
                    ],
                    "If the template literal is tagged and the text has an invalid escape, ",
                    [
                        "inlinecode",
                        "cooked"
                    ],
                    " will be ",
                    [
                        "inlinecode",
                        "null"
                    ],
                    ", e.g., ",
                    [
                        "inlinecode",
                        "tag`\\unicode and \\u{55}` "
                    ]
                ],
                "file": "/es2018.md"
            }
        ],
        "children": []
    },
    "Template Literals/TemplateLiteral": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface TemplateLiteral <: Expression {\n    type: \"TemplateLiteral\";\n    quasis: [ TemplateElement ];\n    expressions: [ Expression ];\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface TemplateLiteral <: Expression {\n    type: \"TemplateLiteral\";\n    quasis: [ TemplateElement ];\n    expressions: [ Expression ];\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Template Literals/TaggedTemplateExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface TaggedTemplateExpression <: Expression {\n    type: \"TaggedTemplateExpression\";\n    tag: Expression;\n    quasi: TemplateLiteral;\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Template Literals/TemplateElement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface TemplateElement <: Node {\n    type: \"TemplateElement\";\n    tail: boolean;\n    value: {\n        cooked: string;\n        raw: string;\n    };\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Patterns": {
        "content": [
            {
                "content": [],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ObjectPattern {\n    properties: [ AssignmentProperty | RestElement ];\n}\n"
                    ],
                    "Rest properties, e.g., ",
                    [
                        "inlinecode",
                        "{a, ...rest} = obj"
                    ],
                    "."
                ],
                "file": "/es2018.md"
            },
            {
                "content": [
                    "Destructuring binding and assignment are not part of ES5, but all binding positions accept ",
                    [
                        "inlinecode",
                        "Pattern"
                    ],
                    " to allow for destructuring in ES6. Nevertheless, for ES5, the only ",
                    [
                        "inlinecode",
                        "Pattern"
                    ],
                    " subtype is ",
                    [
                        "link",
                        {
                            "href": "#identifier"
                        },
                        [
                            "inlinecode",
                            "Identifier"
                        ]
                    ],
                    ".",
                    [
                        "inlinecode",
                        "js\ninterface Pattern <: Node { }\n"
                    ]
                ],
                "file": "/es5.md"
            },
            {
                "content": [],
                "file": "/extensions/type-annotations.md"
            }
        ],
        "children": []
    },
    "Patterns/ObjectPattern": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        ""
                    ],
                    "`js\ninterface AssignmentProperty <: Property {\n    type: \"Property\"; // inherited\n    value: Pattern;\n    kind: \"init\";\n    method: false;\n}",
                    "interface ObjectPattern <: Pattern {\n    type: \"ObjectPattern\";\n    properties: ",
                    [
                        "link_ref",
                        {
                            "ref": " assignmentproperty ",
                            "original": "[ AssignmentProperty ]"
                        },
                        " AssignmentProperty "
                    ],
                    ";\n}\n",
                    [
                        "inlinecode",
                        ""
                    ],
                    "`"
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        ""
                    ],
                    "`js\ninterface AssignmentProperty <: Property {\n    type: \"Property\"; // inherited\n    value: Pattern;\n    kind: \"init\";\n    method: false;\n}",
                    "interface ObjectPattern <: Pattern {\n    type: \"ObjectPattern\";\n    properties: ",
                    [
                        "link_ref",
                        {
                            "ref": " assignmentproperty ",
                            "original": "[ AssignmentProperty ]"
                        },
                        " AssignmentProperty "
                    ],
                    ";\n}\n",
                    [
                        "inlinecode",
                        ""
                    ],
                    "`"
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ObjectPattern {\n    typeAnnotation: TypeAnnotation | null;\n}\n"
                    ]
                ],
                "file": "/extensions/type-annotations.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ObjectPattern {\n    typeAnnotation: TypeAnnotation | null;\n}\n"
                    ]
                ],
                "file": "/extensions/type-annotations.md"
            }
        ],
        "children": []
    },
    "Patterns/ArrayPattern": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ArrayPattern <: Pattern {\n    type: \"ArrayPattern\";\n    elements: [ Pattern | null ];\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ArrayPattern {\n    typeAnnotation: TypeAnnotation | null;\n}\n"
                    ]
                ],
                "file": "/extensions/type-annotations.md"
            }
        ],
        "children": []
    },
    "Patterns/RestElement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface RestElement <: Pattern {\n    type: \"RestElement\";\n    argument: Pattern;\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface RestElement {\n    typeAnnotation: TypeAnnotation | null;\n}\n"
                    ]
                ],
                "file": "/extensions/type-annotations.md"
            }
        ],
        "children": []
    },
    "Patterns/AssignmentPattern": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface AssignmentPattern <: Pattern {\n    type: \"AssignmentPattern\";\n    left: Pattern;\n    right: Expression;\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Classes": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface Class <: Node {\n    id: Identifier | null;\n    superClass: Expression | null;\n    body: ClassBody;\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    "These language extensions cover following class features proposals:\n - ",
                    [
                        "link_ref",
                        {
                            "ref": "class fields",
                            "original": "[Class Fields]"
                        },
                        "Class Fields"
                    ],
                    "\n - ",
                    [
                        "link_ref",
                        {
                            "ref": "static class features",
                            "original": "[Static Class Features]"
                        },
                        "Static Class Features"
                    ],
                    "\n - ",
                    [
                        "link_ref",
                        {
                            "ref": "private methods",
                            "original": "[Private Methods]"
                        },
                        "Private Methods"
                    ],
                    "\n - ",
                    [
                        "link_ref",
                        {
                            "ref": "static initialization blocks",
                            "original": "[Static Initialization Blocks]"
                        },
                        "Static Initialization Blocks"
                    ],
                    "."
                ],
                "file": "/es2022.md"
            }
        ],
        "children": []
    },
    "Classes/ClassBody": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ClassBody <: Node {\n    type: \"ClassBody\";\n    body: [ MethodDefinition ];\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ClassBody <: Node {\n    type: \"ClassBody\";\n    body: [ MethodDefinition ];\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ClassBody {\n    body: [ MethodDefinition | PropertyDefinition | StaticBlock ];\n}\n"
                    ]
                ],
                "file": "/es2022.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ClassBody {\n    body: [ MethodDefinition | PropertyDefinition | StaticBlock ];\n}\n"
                    ]
                ],
                "file": "/es2022.md"
            }
        ],
        "children": []
    },
    "Classes/MethodDefinition": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface MethodDefinition <: Node {\n    type: \"MethodDefinition\";\n    key: Expression;\n    value: FunctionExpression;\n    kind: \"constructor\" | \"method\" | \"get\" | \"set\";\n    computed: boolean;\n    static: boolean;\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface MethodDefinition {\n    key: Expression | PrivateIdentifier;\n}\n"
                    ]
                ],
                "file": "/es2022.md"
            }
        ],
        "children": []
    },
    "Classes/ClassDeclaration": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ClassDeclaration <: Class, Declaration {\n    type: \"ClassDeclaration\";\n    id: Identifier;\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Classes/ClassExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ClassExpression <: Class, Expression {\n    type: \"ClassExpression\";\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Classes/MetaProperty": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface MetaProperty <: Expression {\n    type: \"MetaProperty\";\n    meta: Identifier;\n    property: Identifier;\n}\n"
                    ]
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Modules": {
        "content": [
            {
                "content": [],
                "file": "/es2015.md"
            },
            {
                "content": [],
                "file": "/es2020.md"
            },
            {
                "content": [
                    "See ",
                    [
                        "link_ref",
                        {
                            "ref": "arbitrary module namespace identifier names",
                            "original": "[Arbitrary module namespace identifier names]"
                        },
                        "Arbitrary module namespace identifier names"
                    ],
                    " for more details."
                ],
                "file": "/es2022.md"
            }
        ],
        "children": []
    },
    "Modules/ModuleDeclaration": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ModuleDeclaration <: Node { }\n"
                    ],
                    "A module ",
                    [
                        "inlinecode",
                        "import"
                    ],
                    " or ",
                    [
                        "inlinecode",
                        "export"
                    ],
                    " declaration."
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ModuleDeclaration <: Node { }\n"
                    ],
                    "A module ",
                    [
                        "inlinecode",
                        "import"
                    ],
                    " or ",
                    [
                        "inlinecode",
                        "export"
                    ],
                    " declaration."
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Modules/ModuleSpecifier": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ModuleSpecifier <: Node {\n    local: Identifier;\n}\n"
                    ],
                    "A specifier in an import or export declaration."
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Modules/Imports": {
        "content": [
            {
                "content": [],
                "file": "/es2015.md"
            },
            {
                "content": [],
                "file": "/es2022.md"
            },
            {
                "content": [],
                "file": "/es2022.md"
            }
        ],
        "children": []
    },
    "Modules/Imports/ImportDeclaration": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ImportDeclaration <: ModuleDeclaration {\n    type: \"ImportDeclaration\";\n    specifiers: [ ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier ];\n    source: Literal;\n}\n"
                    ],
                    "An import declaration, e.g., ",
                    [
                        "inlinecode",
                        "import foo from \"mod\";"
                    ],
                    "."
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ImportDeclaration <: ModuleDeclaration {\n    type: \"ImportDeclaration\";\n    specifiers: [ ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier ];\n    source: Literal;\n}\n"
                    ],
                    "An import declaration, e.g., ",
                    [
                        "inlinecode",
                        "import foo from \"mod\";"
                    ],
                    "."
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Modules/Imports/ImportSpecifier": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ImportSpecifier <: ModuleSpecifier {\n    type: \"ImportSpecifier\";\n    imported: Identifier;\n}\n"
                    ],
                    "An imported variable binding, e.g., ",
                    [
                        "inlinecode",
                        "{foo}"
                    ],
                    " in ",
                    [
                        "inlinecode",
                        "import {foo} from \"mod\""
                    ],
                    " or ",
                    [
                        "inlinecode",
                        "{foo as bar}"
                    ],
                    " in ",
                    [
                        "inlinecode",
                        "import {foo as bar} from \"mod\""
                    ],
                    ". The ",
                    [
                        "inlinecode",
                        "imported"
                    ],
                    " field refers to the name of the export imported from the module. The ",
                    [
                        "inlinecode",
                        "local"
                    ],
                    " field refers to the binding imported into the local module scope. If it is a basic named import, such as in ",
                    [
                        "inlinecode",
                        "import {foo} from \"mod\""
                    ],
                    ", both ",
                    [
                        "inlinecode",
                        "imported"
                    ],
                    " and ",
                    [
                        "inlinecode",
                        "local"
                    ],
                    " are equivalent ",
                    [
                        "inlinecode",
                        "Identifier"
                    ],
                    " nodes; in this case an ",
                    [
                        "inlinecode",
                        "Identifier"
                    ],
                    " node representing ",
                    [
                        "inlinecode",
                        "foo"
                    ],
                    ". If it is an aliased import, such as in ",
                    [
                        "inlinecode",
                        "import {foo as bar} from \"mod\""
                    ],
                    ", the ",
                    [
                        "inlinecode",
                        "imported"
                    ],
                    " field is an ",
                    [
                        "inlinecode",
                        "Identifier"
                    ],
                    " node representing ",
                    [
                        "inlinecode",
                        "foo"
                    ],
                    ", and the ",
                    [
                        "inlinecode",
                        "local"
                    ],
                    " field is an ",
                    [
                        "inlinecode",
                        "Identifier"
                    ],
                    " node representing ",
                    [
                        "inlinecode",
                        "bar"
                    ],
                    "."
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ImportSpecifier <: ModuleSpecifier {\n    imported: Identifier | Literal;\n}\n"
                    ],
                    "If ",
                    [
                        "inlinecode",
                        "imported"
                    ],
                    " is a ",
                    [
                        "inlinecode",
                        "Literal"
                    ],
                    ", ",
                    [
                        "inlinecode",
                        "imported.value"
                    ],
                    " must be a string without lone surrogate."
                ],
                "file": "/es2022.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ImportSpecifier <: ModuleSpecifier {\n    imported: Identifier | Literal;\n}\n"
                    ],
                    "If ",
                    [
                        "inlinecode",
                        "imported"
                    ],
                    " is a ",
                    [
                        "inlinecode",
                        "Literal"
                    ],
                    ", ",
                    [
                        "inlinecode",
                        "imported.value"
                    ],
                    " must be a string without lone surrogate."
                ],
                "file": "/es2022.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ImportSpecifier <: ModuleSpecifier {\n    imported: Identifier | Literal;\n}\n"
                    ],
                    "If ",
                    [
                        "inlinecode",
                        "imported"
                    ],
                    " is a ",
                    [
                        "inlinecode",
                        "Literal"
                    ],
                    ", ",
                    [
                        "inlinecode",
                        "imported.value"
                    ],
                    " must be a string without lone surrogate."
                ],
                "file": "/es2022.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ImportSpecifier <: ModuleSpecifier {\n    imported: Identifier | Literal;\n}\n"
                    ],
                    "If ",
                    [
                        "inlinecode",
                        "imported"
                    ],
                    " is a ",
                    [
                        "inlinecode",
                        "Literal"
                    ],
                    ", ",
                    [
                        "inlinecode",
                        "imported.value"
                    ],
                    " must be a string without lone surrogate."
                ],
                "file": "/es2022.md"
            }
        ],
        "children": []
    },
    "Modules/Imports/ImportDefaultSpecifier": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ImportDefaultSpecifier <: ModuleSpecifier {\n    type: \"ImportDefaultSpecifier\";\n}\n"
                    ],
                    "A default import specifier, e.g., ",
                    [
                        "inlinecode",
                        "foo"
                    ],
                    " in ",
                    [
                        "inlinecode",
                        "import foo from \"mod.js\""
                    ],
                    "."
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Modules/Imports/ImportNamespaceSpecifier": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ImportNamespaceSpecifier <: ModuleSpecifier {\n    type: \"ImportNamespaceSpecifier\";\n}\n"
                    ],
                    "A namespace import specifier, e.g., ",
                    [
                        "inlinecode",
                        "* as foo"
                    ],
                    " in ",
                    [
                        "inlinecode",
                        "import * as foo from \"mod.js\""
                    ],
                    "."
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Modules/Exports": {
        "content": [
            {
                "content": [],
                "file": "/es2015.md"
            },
            {
                "content": [],
                "file": "/es2022.md"
            }
        ],
        "children": []
    },
    "Modules/Exports/ExportNamedDeclaration": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ExportNamedDeclaration <: ModuleDeclaration {\n    type: \"ExportNamedDeclaration\";\n    declaration: Declaration | null;\n    specifiers: [ ExportSpecifier ];\n    source: Literal | null;\n}\n"
                    ],
                    "An export named declaration, e.g., ",
                    [
                        "inlinecode",
                        "export {foo, bar};"
                    ],
                    ", ",
                    [
                        "inlinecode",
                        "export {foo} from \"mod\";"
                    ],
                    " or ",
                    [
                        "inlinecode",
                        "export var foo = 1;"
                    ],
                    ".",
                    [
                        "em",
                        "Note: Having ",
                        [
                            "inlinecode",
                            "declaration"
                        ],
                        " populated with non-empty ",
                        [
                            "inlinecode",
                            "specifiers"
                        ],
                        " or non-null ",
                        [
                            "inlinecode",
                            "source"
                        ],
                        " results in an invalid state."
                    ]
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ExportNamedDeclaration <: ModuleDeclaration {\n    type: \"ExportNamedDeclaration\";\n    declaration: Declaration | null;\n    specifiers: [ ExportSpecifier ];\n    source: Literal | null;\n}\n"
                    ],
                    "An export named declaration, e.g., ",
                    [
                        "inlinecode",
                        "export {foo, bar};"
                    ],
                    ", ",
                    [
                        "inlinecode",
                        "export {foo} from \"mod\";"
                    ],
                    " or ",
                    [
                        "inlinecode",
                        "export var foo = 1;"
                    ],
                    ".",
                    [
                        "em",
                        "Note: Having ",
                        [
                            "inlinecode",
                            "declaration"
                        ],
                        " populated with non-empty ",
                        [
                            "inlinecode",
                            "specifiers"
                        ],
                        " or non-null ",
                        [
                            "inlinecode",
                            "source"
                        ],
                        " results in an invalid state."
                    ]
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Modules/Exports/ExportSpecifier": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ExportSpecifier <: ModuleSpecifier {\n    type: \"ExportSpecifier\";\n    exported: Identifier;\n}\n"
                    ],
                    "An exported variable binding, e.g., ",
                    [
                        "inlinecode",
                        "{foo}"
                    ],
                    " in ",
                    [
                        "inlinecode",
                        "export {foo}"
                    ],
                    " or ",
                    [
                        "inlinecode",
                        "{bar as foo}"
                    ],
                    " in ",
                    [
                        "inlinecode",
                        "export {bar as foo}"
                    ],
                    ". The ",
                    [
                        "inlinecode",
                        "exported"
                    ],
                    " field refers to the name exported in the module. The ",
                    [
                        "inlinecode",
                        "local"
                    ],
                    " field refers to the binding into the local module scope. If it is a basic named export, such as in ",
                    [
                        "inlinecode",
                        "export {foo}"
                    ],
                    ", both ",
                    [
                        "inlinecode",
                        "exported"
                    ],
                    " and ",
                    [
                        "inlinecode",
                        "local"
                    ],
                    " are equivalent ",
                    [
                        "inlinecode",
                        "Identifier"
                    ],
                    " nodes; in this case an ",
                    [
                        "inlinecode",
                        "Identifier"
                    ],
                    " node representing ",
                    [
                        "inlinecode",
                        "foo"
                    ],
                    ". If it is an aliased export, such as in ",
                    [
                        "inlinecode",
                        "export {bar as foo}"
                    ],
                    ", the ",
                    [
                        "inlinecode",
                        "exported"
                    ],
                    " field is an ",
                    [
                        "inlinecode",
                        "Identifier"
                    ],
                    " node representing ",
                    [
                        "inlinecode",
                        "foo"
                    ],
                    ", and the ",
                    [
                        "inlinecode",
                        "local"
                    ],
                    " field is an ",
                    [
                        "inlinecode",
                        "Identifier"
                    ],
                    " node representing ",
                    [
                        "inlinecode",
                        "bar"
                    ],
                    "."
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ExportSpecifier <: ModuleSpecifier {\n    local: Identifier | Literal;\n    exported: Identifier | Literal;\n}\n"
                    ],
                    [
                        "inlinecode",
                        "local"
                    ],
                    " can be ",
                    [
                        "inlinecode",
                        "Literal"
                    ],
                    " only if the ",
                    [
                        "inlinecode",
                        "source"
                    ],
                    " of the ",
                    [
                        "inlinecode",
                        "ExportNamedDeclaration"
                    ],
                    " of the parent of this node is not ",
                    [
                        "inlinecode",
                        "null"
                    ],
                    ". e.g. ",
                    [
                        "inlinecode",
                        "export { \"foo\" as \"foo\" } from \"mod\""
                    ],
                    " is valid, ",
                    [
                        "inlinecode",
                        "export { \"foo\" as \"foo\" }"
                    ],
                    " is invalid.",
                    "If ",
                    [
                        "inlinecode",
                        "exported"
                    ],
                    "/",
                    [
                        "inlinecode",
                        "local"
                    ],
                    " is ",
                    [
                        "inlinecode",
                        "Literal"
                    ],
                    ", ",
                    [
                        "inlinecode",
                        "exported.value"
                    ],
                    "/",
                    [
                        "inlinecode",
                        "local.value"
                    ],
                    " must be a string without lone surrogate."
                ],
                "file": "/es2022.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ExportSpecifier <: ModuleSpecifier {\n    local: Identifier | Literal;\n    exported: Identifier | Literal;\n}\n"
                    ],
                    [
                        "inlinecode",
                        "local"
                    ],
                    " can be ",
                    [
                        "inlinecode",
                        "Literal"
                    ],
                    " only if the ",
                    [
                        "inlinecode",
                        "source"
                    ],
                    " of the ",
                    [
                        "inlinecode",
                        "ExportNamedDeclaration"
                    ],
                    " of the parent of this node is not ",
                    [
                        "inlinecode",
                        "null"
                    ],
                    ". e.g. ",
                    [
                        "inlinecode",
                        "export { \"foo\" as \"foo\" } from \"mod\""
                    ],
                    " is valid, ",
                    [
                        "inlinecode",
                        "export { \"foo\" as \"foo\" }"
                    ],
                    " is invalid.",
                    "If ",
                    [
                        "inlinecode",
                        "exported"
                    ],
                    "/",
                    [
                        "inlinecode",
                        "local"
                    ],
                    " is ",
                    [
                        "inlinecode",
                        "Literal"
                    ],
                    ", ",
                    [
                        "inlinecode",
                        "exported.value"
                    ],
                    "/",
                    [
                        "inlinecode",
                        "local.value"
                    ],
                    " must be a string without lone surrogate."
                ],
                "file": "/es2022.md"
            }
        ],
        "children": []
    },
    "Modules/Exports/ExportDefaultDeclaration": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        ""
                    ],
                    "`js\ninterface AnonymousDefaultExportedFunctionDeclaration <: Function {\n    type: \"FunctionDeclaration\";\n    id: null;\n}",
                    "interface AnonymousDefaultExportedClassDeclaration <: Class {\n    type: \"ClassDeclaration\";\n    id: null;\n}",
                    "interface ExportDefaultDeclaration <: ModuleDeclaration {\n    type: \"ExportDefaultDeclaration\";\n    declaration: AnonymousDefaultExportedFunctionDeclaration | FunctionDeclaration | AnonymousDefaultExportedClassDeclaration | ClassDeclaration | Expression;\n}\n",
                    [
                        "inlinecode",
                        ""
                    ],
                    "`",
                    "An export default declaration, e.g., ",
                    [
                        "inlinecode",
                        "export default function () {};"
                    ],
                    " or ",
                    [
                        "inlinecode",
                        "export default 1;"
                    ],
                    "."
                ],
                "file": "/es2015.md"
            }
        ],
        "children": []
    },
    "Modules/Exports/ExportAllDeclaration": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ExportAllDeclaration <: ModuleDeclaration {\n    type: \"ExportAllDeclaration\";\n    source: Literal;\n}\n"
                    ],
                    "An export batch declaration, e.g., ",
                    [
                        "inlinecode",
                        "export * from \"mod\";"
                    ],
                    "."
                ],
                "file": "/es2015.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ExportAllDeclaration {\n    exported: Identifier | Literal | null;\n}\n"
                    ],
                    "If ",
                    [
                        "inlinecode",
                        "exported"
                    ],
                    " is ",
                    [
                        "inlinecode",
                        "Literal"
                    ],
                    ", ",
                    [
                        "inlinecode",
                        "exported.value"
                    ],
                    " must be a string without lone surrogate."
                ],
                "file": "/es2022.md"
            }
        ],
        "children": []
    },
    "BinaryOperator": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend enum BinaryOperator {\n    \"**\"\n}\n"
                    ]
                ],
                "file": "/es2016.md"
            }
        ],
        "children": []
    },
    "AssignmentOperator": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend enum AssignmentOperator {\n    \"**=\"\n}\n"
                    ]
                ],
                "file": "/es2016.md"
            }
        ],
        "children": []
    },
    "Function": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface Function {\n    async: boolean;\n}\n"
                    ]
                ],
                "file": "/es2017.md"
            }
        ],
        "children": []
    },
    "AwaitExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface AwaitExpression <: Expression {\n    type: \"AwaitExpression\";\n    argument: Expression;\n}\n"
                    ]
                ],
                "file": "/es2017.md"
            }
        ],
        "children": []
    },
    "Statements/CatchClause": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface CatchClause {\n    param: Pattern | null;\n}\n"
                    ],
                    "The ",
                    [
                        "inlinecode",
                        "param"
                    ],
                    " is ",
                    [
                        "inlinecode",
                        "null"
                    ],
                    " if the ",
                    [
                        "inlinecode",
                        "catch"
                    ],
                    " binding is omitted. E.g., ",
                    [
                        "inlinecode",
                        "try { foo() } catch { bar() }"
                    ]
                ],
                "file": "/es2019.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface CatchClause {\n    param: Pattern | null;\n}\n"
                    ],
                    "The ",
                    [
                        "inlinecode",
                        "param"
                    ],
                    " is ",
                    [
                        "inlinecode",
                        "null"
                    ],
                    " if the ",
                    [
                        "inlinecode",
                        "catch"
                    ],
                    " binding is omitted. E.g., ",
                    [
                        "inlinecode",
                        "try { foo() } catch { bar() }"
                    ]
                ],
                "file": "/es2019.md"
            }
        ],
        "children": []
    },
    "Literal": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface Literal <: Expression {\n    type: \"Literal\";\n    value: string | boolean | null | number | RegExp | bigint;\n}\n"
                    ]
                ],
                "file": "/es2020.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface Literal <: Expression {\n    type: \"Literal\";\n    value: string | boolean | null | number | RegExp;\n}\n"
                    ],
                    "A literal token. Note that a literal can be an expression."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Literal/BigIntLiteral": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface BigIntLiteral <: Literal {\n  bigint: string;\n}\n"
                    ]
                ],
                "file": "/es2020.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface BigIntLiteral <: Literal {\n  bigint: string;\n}\n"
                    ]
                ],
                "file": "/es2020.md"
            }
        ],
        "children": []
    },
    "Expressions/ChainExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        ""
                    ],
                    "`js\ninterface ChainExpression <: Expression {\n  type: \"ChainExpression\";\n  expression: ChainElement;\n}",
                    "interface ChainElement <: Node {\n  optional: boolean;\n}",
                    "extend interface CallExpression <: ChainElement {}",
                    "extend interface MemberExpression <: ChainElement {}\n",
                    [
                        "inlinecode",
                        ""
                    ],
                    "`",
                    "<details><summary>For Examples:</summary>",
                    [
                        "inlinecode",
                        "jsonc\n// obj.aaa.bbb\n{\n  \"type\": \"MemberExpression\",\n  \"optional\": false,\n  \"object\": {\n    \"type\": \"MemberExpression\",\n    \"optional\": false,\n    \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n    \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n  },\n  \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n}\n"
                    ],
                    [
                        "inlinecode",
                        "jsonc\n// obj.aaa?.bbb\n{\n  \"type\": \"ChainExpression\",\n  \"expression\": {\n    \"type\": \"MemberExpression\",\n    \"optional\": true,\n    \"object\": {\n      \"type\": \"MemberExpression\",\n      \"optional\": false,\n      \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n      \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n    },\n    \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n  }\n}\n"
                    ],
                    [
                        "inlinecode",
                        "jsonc\n// obj?.aaa.bbb\n{\n  \"type\": \"ChainExpression\",\n  \"expression\": {\n    \"type\": \"MemberExpression\",\n    \"optional\": false,\n    \"object\": {\n      \"type\": \"MemberExpression\",\n      \"optional\": true,\n      \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n      \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n    },\n    \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n  }\n}\n"
                    ],
                    [
                        "inlinecode",
                        "jsonc\n// obj?.aaa?.bbb\n{\n  \"type\": \"ChainExpression\",\n  \"expression\": {\n    \"type\": \"MemberExpression\",\n    \"optional\": true,\n    \"object\": {\n      \"type\": \"MemberExpression\",\n      \"optional\": true,\n      \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n      \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n    },\n    \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n  }\n}\n"
                    ],
                    [
                        "inlinecode",
                        "jsonc\n// (obj.aaa).bbb\n{\n  \"type\": \"MemberExpression\",\n  \"optional\": false,\n  \"object\": {\n    \"type\": \"MemberExpression\",\n    \"optional\": false,\n    \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n    \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n  },\n  \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n}\n"
                    ],
                    [
                        "inlinecode",
                        "jsonc\n// (obj.aaa)?.bbb\n{\n  \"type\": \"ChainExpression\",\n  \"expression\": {\n    \"type\": \"MemberExpression\",\n    \"optional\": true,\n    \"object\": {\n      \"type\": \"MemberExpression\",\n      \"optional\": false,\n      \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n      \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n    },\n    \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n  }\n}\n"
                    ],
                    [
                        "inlinecode",
                        "jsonc\n// (obj?.aaa).bbb\n{\n  \"type\": \"MemberExpression\",\n  \"optional\": false,\n  \"object\": {\n    \"type\": \"ChainExpression\",\n    \"expression\": {\n      \"type\": \"MemberExpression\",\n      \"optional\": true,\n      \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n      \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n    }\n  },\n  \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n}\n"
                    ],
                    [
                        "inlinecode",
                        "jsonc\n// (obj?.aaa)?.bbb\n{\n  \"type\": \"ChainExpression\",\n  \"expression\": {\n    \"type\": \"MemberExpression\",\n    \"optional\": true,\n    \"object\": {\n      \"type\": \"ChainExpression\",\n      \"expression\": {\n        \"type\": \"MemberExpression\",\n        \"optional\": true,\n        \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n        \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n      }\n    },\n    \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n  }\n}\n"
                    ],
                    "</details>"
                ],
                "file": "/es2020.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        ""
                    ],
                    "`js\ninterface ChainExpression <: Expression {\n  type: \"ChainExpression\";\n  expression: ChainElement;\n}",
                    "interface ChainElement <: Node {\n  optional: boolean;\n}",
                    "extend interface CallExpression <: ChainElement {}",
                    "extend interface MemberExpression <: ChainElement {}\n",
                    [
                        "inlinecode",
                        ""
                    ],
                    "`",
                    "<details><summary>For Examples:</summary>",
                    [
                        "inlinecode",
                        "jsonc\n// obj.aaa.bbb\n{\n  \"type\": \"MemberExpression\",\n  \"optional\": false,\n  \"object\": {\n    \"type\": \"MemberExpression\",\n    \"optional\": false,\n    \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n    \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n  },\n  \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n}\n"
                    ],
                    [
                        "inlinecode",
                        "jsonc\n// obj.aaa?.bbb\n{\n  \"type\": \"ChainExpression\",\n  \"expression\": {\n    \"type\": \"MemberExpression\",\n    \"optional\": true,\n    \"object\": {\n      \"type\": \"MemberExpression\",\n      \"optional\": false,\n      \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n      \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n    },\n    \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n  }\n}\n"
                    ],
                    [
                        "inlinecode",
                        "jsonc\n// obj?.aaa.bbb\n{\n  \"type\": \"ChainExpression\",\n  \"expression\": {\n    \"type\": \"MemberExpression\",\n    \"optional\": false,\n    \"object\": {\n      \"type\": \"MemberExpression\",\n      \"optional\": true,\n      \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n      \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n    },\n    \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n  }\n}\n"
                    ],
                    [
                        "inlinecode",
                        "jsonc\n// obj?.aaa?.bbb\n{\n  \"type\": \"ChainExpression\",\n  \"expression\": {\n    \"type\": \"MemberExpression\",\n    \"optional\": true,\n    \"object\": {\n      \"type\": \"MemberExpression\",\n      \"optional\": true,\n      \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n      \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n    },\n    \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n  }\n}\n"
                    ],
                    [
                        "inlinecode",
                        "jsonc\n// (obj.aaa).bbb\n{\n  \"type\": \"MemberExpression\",\n  \"optional\": false,\n  \"object\": {\n    \"type\": \"MemberExpression\",\n    \"optional\": false,\n    \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n    \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n  },\n  \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n}\n"
                    ],
                    [
                        "inlinecode",
                        "jsonc\n// (obj.aaa)?.bbb\n{\n  \"type\": \"ChainExpression\",\n  \"expression\": {\n    \"type\": \"MemberExpression\",\n    \"optional\": true,\n    \"object\": {\n      \"type\": \"MemberExpression\",\n      \"optional\": false,\n      \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n      \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n    },\n    \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n  }\n}\n"
                    ],
                    [
                        "inlinecode",
                        "jsonc\n// (obj?.aaa).bbb\n{\n  \"type\": \"MemberExpression\",\n  \"optional\": false,\n  \"object\": {\n    \"type\": \"ChainExpression\",\n    \"expression\": {\n      \"type\": \"MemberExpression\",\n      \"optional\": true,\n      \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n      \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n    }\n  },\n  \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n}\n"
                    ],
                    [
                        "inlinecode",
                        "jsonc\n// (obj?.aaa)?.bbb\n{\n  \"type\": \"ChainExpression\",\n  \"expression\": {\n    \"type\": \"MemberExpression\",\n    \"optional\": true,\n    \"object\": {\n      \"type\": \"ChainExpression\",\n      \"expression\": {\n        \"type\": \"MemberExpression\",\n        \"optional\": true,\n        \"object\": { \"type\": \"Identifier\", \"name\": \"obj\" },\n        \"property\": { \"type\": \"Identifier\", \"name\": \"aaa\" }\n      }\n    },\n    \"property\": { \"type\": \"Identifier\", \"name\": \"bbb\" }\n  }\n}\n"
                    ],
                    "</details>"
                ],
                "file": "/es2020.md"
            }
        ],
        "children": []
    },
    "Expressions/ImportExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ImportExpression <: Expression {\n  type: \"ImportExpression\";\n  source: Expression;\n}\n"
                    ]
                ],
                "file": "/es2020.md"
            }
        ],
        "children": []
    },
    "Expressions/LogicalExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend enum LogicalOperator {\n    \"??\"\n}\n"
                    ]
                ],
                "file": "/es2020.md"
            }
        ],
        "children": []
    },
    "Expressions/MetaProperty": {
        "content": [
            {
                "content": [
                    "Existing ",
                    [
                        "link_ref",
                        {
                            "ref": "metaproperty",
                            "original": "[MetaProperty]"
                        },
                        "MetaProperty"
                    ],
                    " node represents ",
                    [
                        "inlinecode",
                        "import.meta"
                    ],
                    " meta property as well."
                ],
                "file": "/es2020.md"
            }
        ],
        "children": []
    },
    "Modules/ExportAllDeclaration": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ExportAllDeclaration {\n  exported: Identifier | null;\n}\n"
                    ],
                    "\nThe ",
                    [
                        "inlinecode",
                        "exported"
                    ],
                    " property contains an ",
                    [
                        "inlinecode",
                        "Identifier"
                    ],
                    " when a different exported name is specified using ",
                    [
                        "inlinecode",
                        "as"
                    ],
                    ", e.g., ",
                    [
                        "inlinecode",
                        "export * as foo from \"mod\";"
                    ],
                    "."
                ],
                "file": "/es2020.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface ExportAllDeclaration {\n  exported: Identifier | null;\n}\n"
                    ],
                    "\nThe ",
                    [
                        "inlinecode",
                        "exported"
                    ],
                    " property contains an ",
                    [
                        "inlinecode",
                        "Identifier"
                    ],
                    " when a different exported name is specified using ",
                    [
                        "inlinecode",
                        "as"
                    ],
                    ", e.g., ",
                    [
                        "inlinecode",
                        "export * as foo from \"mod\";"
                    ],
                    "."
                ],
                "file": "/es2020.md"
            }
        ],
        "children": []
    },
    "Expressions/AssignmentOperator": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend enum AssignmentOperator {\n    \"||=\" | \"&&=\" | \"??=\"\n}\n"
                    ]
                ],
                "file": "/es2021.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend enum AssignmentOperator {\n    \"||=\" | \"&&=\" | \"??=\"\n}\n"
                    ]
                ],
                "file": "/es2021.md"
            }
        ],
        "children": []
    },
    "Classes/PropertyDefinition": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface PropertyDefinition <: Node {\n    type: \"PropertyDefinition\";\n    key: Expression | PrivateIdentifier;\n    value: Expression | null;\n    computed: boolean;\n    static: boolean;\n}\n"
                    ]
                ],
                "file": "/es2022.md"
            }
        ],
        "children": []
    },
    "Classes/MethodDefinition/PrivateIdentifier": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface PrivateIdentifier <: Node {\n    type: \"PrivateIdentifier\";\n    name: string;\n}\n"
                    ],
                    "A private identifier refers to private class elements. For a private name ",
                    [
                        "inlinecode",
                        "#a"
                    ],
                    ", its ",
                    [
                        "inlinecode",
                        "name"
                    ],
                    " is ",
                    [
                        "inlinecode",
                        "a"
                    ],
                    ".",
                    [
                        "inlinecode",
                        "js\nextend interface MemberExpression {\n    property: Expression | PrivateIdentifier;\n}\n"
                    ]
                ],
                "file": "/es2022.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface PrivateIdentifier <: Node {\n    type: \"PrivateIdentifier\";\n    name: string;\n}\n"
                    ],
                    "A private identifier refers to private class elements. For a private name ",
                    [
                        "inlinecode",
                        "#a"
                    ],
                    ", its ",
                    [
                        "inlinecode",
                        "name"
                    ],
                    " is ",
                    [
                        "inlinecode",
                        "a"
                    ],
                    ".",
                    [
                        "inlinecode",
                        "js\nextend interface MemberExpression {\n    property: Expression | PrivateIdentifier;\n}\n"
                    ]
                ],
                "file": "/es2022.md"
            }
        ],
        "children": []
    },
    "Classes/StaticBlock": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface StaticBlock <: BlockStatement {\n    type: \"StaticBlock\";\n}\n"
                    ],
                    "A static block ",
                    [
                        "inlinecode",
                        "static { }"
                    ],
                    " is a block statement serving as an additional static initializer."
                ],
                "file": "/es2022.md"
            }
        ],
        "children": []
    },
    "Classes/Expressions": {
        "content": [
            {
                "content": [],
                "file": "/es2022.md"
            }
        ],
        "children": []
    },
    "Classes/Expressions/BinaryExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface BinaryExpression <: Expression {\n    left: Expression | PrivateIdentifier;\n}\n"
                    ]
                ],
                "file": "/es2022.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface BinaryExpression <: Expression {\n    left: Expression | PrivateIdentifier;\n}\n"
                    ]
                ],
                "file": "/es2022.md"
            }
        ],
        "children": []
    },
    "Node objects": {
        "content": [
            {
                "content": [
                    "ESTree AST nodes are represented as ",
                    [
                        "inlinecode",
                        "Node"
                    ],
                    " objects, which may have any prototype inheritance but which implement the following interface:",
                    [
                        "inlinecode",
                        "js\ninterface Node {\n    type: string;\n    loc: SourceLocation | null;\n}\n"
                    ],
                    "The ",
                    [
                        "inlinecode",
                        "type"
                    ],
                    " field is a string representing the AST variant type. Each subtype of ",
                    [
                        "inlinecode",
                        "Node"
                    ],
                    " is documented below with the specific string of its ",
                    [
                        "inlinecode",
                        "type"
                    ],
                    " field. You can use this field to determine which interface a node implements.",
                    "The ",
                    [
                        "inlinecode",
                        "loc"
                    ],
                    " field represents the source location information of the node. If the node contains no information about the source location, the field is ",
                    [
                        "inlinecode",
                        "null"
                    ],
                    "; otherwise it is an object consisting of a start position (the position of the first character of the parsed source region) and an end position (the position of the first character after the parsed source region):",
                    [
                        "inlinecode",
                        "js\ninterface SourceLocation {\n    source: string | null;\n    start: Position;\n    end: Position;\n}\n"
                    ],
                    "Each ",
                    [
                        "inlinecode",
                        "Position"
                    ],
                    " object consists of a ",
                    [
                        "inlinecode",
                        "line"
                    ],
                    " number (1-indexed) and a ",
                    [
                        "inlinecode",
                        "column"
                    ],
                    " number (0-indexed):",
                    [
                        "inlinecode",
                        "js\ninterface Position {\n    line: number; // >= 1\n    column: number; // >= 0\n}\n"
                    ]
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Identifier": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface Identifier <: Expression, Pattern {\n    type: \"Identifier\";\n    name: string;\n}\n"
                    ],
                    "An identifier. Note that an identifier may be an expression or a destructuring pattern."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nextend interface Identifier {\n    typeAnnotation: TypeAnnotation | null;\n}\n"
                    ],
                    "The ",
                    [
                        "inlinecode",
                        "typeAnnotation"
                    ],
                    " property is used only in the case of variable declarations with type annotations or function arguments with type annotations."
                ],
                "file": "/extensions/type-annotations.md"
            }
        ],
        "children": []
    },
    "Literal/RegExpLiteral": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface RegExpLiteral <: Literal {\n  regex: {\n    pattern: string;\n    flags: string;\n  };\n}\n"
                    ],
                    "The ",
                    [
                        "inlinecode",
                        "regex"
                    ],
                    " property allows regexes to be represented in environments that don’t\nsupport certain flags such as ",
                    [
                        "inlinecode",
                        "y"
                    ],
                    " or ",
                    [
                        "inlinecode",
                        "u"
                    ],
                    ". In environments that don't support\nthese flags ",
                    [
                        "inlinecode",
                        "value"
                    ],
                    " will be ",
                    [
                        "inlinecode",
                        "null"
                    ],
                    " as the regex can't be represented natively."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface RegExpLiteral <: Literal {\n  regex: {\n    pattern: string;\n    flags: string;\n  };\n}\n"
                    ],
                    "The ",
                    [
                        "inlinecode",
                        "regex"
                    ],
                    " property allows regexes to be represented in environments that don’t\nsupport certain flags such as ",
                    [
                        "inlinecode",
                        "y"
                    ],
                    " or ",
                    [
                        "inlinecode",
                        "u"
                    ],
                    ". In environments that don't support\nthese flags ",
                    [
                        "inlinecode",
                        "value"
                    ],
                    " will be ",
                    [
                        "inlinecode",
                        "null"
                    ],
                    " as the regex can't be represented natively."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/ExpressionStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ExpressionStatement <: Statement {\n    type: \"ExpressionStatement\";\n    expression: Expression;\n}\n"
                    ],
                    "An expression statement, i.e., a statement consisting of a single expression."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ExpressionStatement <: Statement {\n    type: \"ExpressionStatement\";\n    expression: Expression;\n}\n"
                    ],
                    "An expression statement, i.e., a statement consisting of a single expression."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Directive": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface Directive <: ExpressionStatement {\n    expression: Literal;\n    directive: string;\n}\n"
                    ],
                    "A directive from the directive prologue of a script or function.\nThe ",
                    [
                        "inlinecode",
                        "directive"
                    ],
                    " property is the raw string source of the directive without quotes."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/BlockStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface BlockStatement <: Statement {\n    type: \"BlockStatement\";\n    body: [ Statement ];\n}\n"
                    ],
                    "A block statement, i.e., a sequence of statements surrounded by braces."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/FunctionBody": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface FunctionBody <: BlockStatement {\n    body: [ Directive | Statement ];\n}\n"
                    ],
                    "The body of a function, which is a block statement that may begin with directives."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/EmptyStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface EmptyStatement <: Statement {\n    type: \"EmptyStatement\";\n}\n"
                    ],
                    "An empty statement, i.e., a solitary semicolon."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/DebuggerStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface DebuggerStatement <: Statement {\n    type: \"DebuggerStatement\";\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "debugger"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/WithStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface WithStatement <: Statement {\n    type: \"WithStatement\";\n    object: Expression;\n    body: Statement;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "with"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Control flow": {
        "content": [
            {
                "content": [],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Control flow/ReturnStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ReturnStatement <: Statement {\n    type: \"ReturnStatement\";\n    argument: Expression | null;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "return"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ReturnStatement <: Statement {\n    type: \"ReturnStatement\";\n    argument: Expression | null;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "return"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Control flow/LabeledStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface LabeledStatement <: Statement {\n    type: \"LabeledStatement\";\n    label: Identifier;\n    body: Statement;\n}\n"
                    ],
                    "A labeled statement, i.e., a statement prefixed by a ",
                    [
                        "inlinecode",
                        "break"
                    ],
                    "/",
                    [
                        "inlinecode",
                        "continue"
                    ],
                    " label."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Control flow/BreakStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface BreakStatement <: Statement {\n    type: \"BreakStatement\";\n    label: Identifier | null;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "break"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Control flow/ContinueStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ContinueStatement <: Statement {\n    type: \"ContinueStatement\";\n    label: Identifier | null;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "continue"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Choice": {
        "content": [
            {
                "content": [],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Choice/IfStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface IfStatement <: Statement {\n    type: \"IfStatement\";\n    test: Expression;\n    consequent: Statement;\n    alternate: Statement | null;\n}\n"
                    ],
                    "An ",
                    [
                        "inlinecode",
                        "if"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface IfStatement <: Statement {\n    type: \"IfStatement\";\n    test: Expression;\n    consequent: Statement;\n    alternate: Statement | null;\n}\n"
                    ],
                    "An ",
                    [
                        "inlinecode",
                        "if"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Choice/SwitchStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface SwitchStatement <: Statement {\n    type: \"SwitchStatement\";\n    discriminant: Expression;\n    cases: [ SwitchCase ];\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "switch"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Choice/SwitchStatement/SwitchCase": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface SwitchCase <: Node {\n    type: \"SwitchCase\";\n    test: Expression | null;\n    consequent: [ Statement ];\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "case"
                    ],
                    " (if ",
                    [
                        "inlinecode",
                        "test"
                    ],
                    " is an ",
                    [
                        "inlinecode",
                        "Expression"
                    ],
                    ") or ",
                    [
                        "inlinecode",
                        "default"
                    ],
                    " (if ",
                    [
                        "inlinecode",
                        "test === null"
                    ],
                    ") clause in the body of a ",
                    [
                        "inlinecode",
                        "switch"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface SwitchCase <: Node {\n    type: \"SwitchCase\";\n    test: Expression | null;\n    consequent: [ Statement ];\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "case"
                    ],
                    " (if ",
                    [
                        "inlinecode",
                        "test"
                    ],
                    " is an ",
                    [
                        "inlinecode",
                        "Expression"
                    ],
                    ") or ",
                    [
                        "inlinecode",
                        "default"
                    ],
                    " (if ",
                    [
                        "inlinecode",
                        "test === null"
                    ],
                    ") clause in the body of a ",
                    [
                        "inlinecode",
                        "switch"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Exceptions": {
        "content": [
            {
                "content": [],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Exceptions/ThrowStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ThrowStatement <: Statement {\n    type: \"ThrowStatement\";\n    argument: Expression;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "throw"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ThrowStatement <: Statement {\n    type: \"ThrowStatement\";\n    argument: Expression;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "throw"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Exceptions/TryStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface TryStatement <: Statement {\n    type: \"TryStatement\";\n    block: BlockStatement;\n    handler: CatchClause | null;\n    finalizer: BlockStatement | null;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "try"
                    ],
                    " statement. If ",
                    [
                        "inlinecode",
                        "handler"
                    ],
                    " is ",
                    [
                        "inlinecode",
                        "null"
                    ],
                    " then ",
                    [
                        "inlinecode",
                        "finalizer"
                    ],
                    " must be a ",
                    [
                        "inlinecode",
                        "BlockStatement"
                    ],
                    "."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Exceptions/TryStatement/CatchClause": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface CatchClause <: Node {\n    type: \"CatchClause\";\n    param: Pattern;\n    body: BlockStatement;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "catch"
                    ],
                    " clause following a ",
                    [
                        "inlinecode",
                        "try"
                    ],
                    " block."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface CatchClause <: Node {\n    type: \"CatchClause\";\n    param: Pattern;\n    body: BlockStatement;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "catch"
                    ],
                    " clause following a ",
                    [
                        "inlinecode",
                        "try"
                    ],
                    " block."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Loops": {
        "content": [
            {
                "content": [],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Loops/WhileStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface WhileStatement <: Statement {\n    type: \"WhileStatement\";\n    test: Expression;\n    body: Statement;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "while"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface WhileStatement <: Statement {\n    type: \"WhileStatement\";\n    test: Expression;\n    body: Statement;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "while"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Loops/DoWhileStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface DoWhileStatement <: Statement {\n    type: \"DoWhileStatement\";\n    body: Statement;\n    test: Expression;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "do"
                    ],
                    "/",
                    [
                        "inlinecode",
                        "while"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Loops/ForStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ForStatement <: Statement {\n    type: \"ForStatement\";\n    init: VariableDeclaration | Expression | null;\n    test: Expression | null;\n    update: Expression | null;\n    body: Statement;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "for"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Statements/Loops/ForInStatement": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ForInStatement <: Statement {\n    type: \"ForInStatement\";\n    left: VariableDeclaration |  Pattern;\n    right: Expression;\n    body: Statement;\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "for"
                    ],
                    "/",
                    [
                        "inlinecode",
                        "in"
                    ],
                    " statement."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Declarations/FunctionDeclaration": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface FunctionDeclaration <: Function, Declaration {\n    type: \"FunctionDeclaration\";\n    id: Identifier;\n}\n"
                    ],
                    "A function declaration. Note that unlike in the parent interface ",
                    [
                        "inlinecode",
                        "Function"
                    ],
                    ", the ",
                    [
                        "inlinecode",
                        "id"
                    ],
                    " cannot be ",
                    [
                        "inlinecode",
                        "null"
                    ],
                    "."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface FunctionDeclaration <: Function, Declaration {\n    type: \"FunctionDeclaration\";\n    id: Identifier;\n}\n"
                    ],
                    "A function declaration. Note that unlike in the parent interface ",
                    [
                        "inlinecode",
                        "Function"
                    ],
                    ", the ",
                    [
                        "inlinecode",
                        "id"
                    ],
                    " cannot be ",
                    [
                        "inlinecode",
                        "null"
                    ],
                    "."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Declarations/VariableDeclaration/VariableDeclarator": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface VariableDeclarator <: Node {\n    type: \"VariableDeclarator\";\n    id: Pattern;\n    init: Expression | null;\n}\n"
                    ],
                    "A variable declarator."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface VariableDeclarator <: Node {\n    type: \"VariableDeclarator\";\n    id: Pattern;\n    init: Expression | null;\n}\n"
                    ],
                    "A variable declarator."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/ThisExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ThisExpression <: Expression {\n    type: \"ThisExpression\";\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "this"
                    ],
                    " expression."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ThisExpression <: Expression {\n    type: \"ThisExpression\";\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "this"
                    ],
                    " expression."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/ArrayExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ArrayExpression <: Expression {\n    type: \"ArrayExpression\";\n    elements: [ Expression | null ];\n}\n"
                    ],
                    "An array expression. An element might be ",
                    [
                        "inlinecode",
                        "null"
                    ],
                    " if it represents a hole in a sparse array. E.g. ",
                    [
                        "inlinecode",
                        "[1,,2]"
                    ],
                    "."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/ObjectExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ObjectExpression <: Expression {\n    type: \"ObjectExpression\";\n    properties: [ Property ];\n}\n"
                    ],
                    "An object expression."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/ObjectExpression/Property": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface Property <: Node {\n    type: \"Property\";\n    key: Literal | Identifier;\n    value: Expression;\n    kind: \"init\" | \"get\" | \"set\";\n}\n"
                    ],
                    "A literal property in an object expression can have either a string or number as its ",
                    [
                        "inlinecode",
                        "value"
                    ],
                    ". Ordinary property initializers have a ",
                    [
                        "inlinecode",
                        "kind"
                    ],
                    " value ",
                    [
                        "inlinecode",
                        "\"init\""
                    ],
                    "; getters and setters have the kind values ",
                    [
                        "inlinecode",
                        "\"get\""
                    ],
                    " and ",
                    [
                        "inlinecode",
                        "\"set\""
                    ],
                    ", respectively."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface Property <: Node {\n    type: \"Property\";\n    key: Literal | Identifier;\n    value: Expression;\n    kind: \"init\" | \"get\" | \"set\";\n}\n"
                    ],
                    "A literal property in an object expression can have either a string or number as its ",
                    [
                        "inlinecode",
                        "value"
                    ],
                    ". Ordinary property initializers have a ",
                    [
                        "inlinecode",
                        "kind"
                    ],
                    " value ",
                    [
                        "inlinecode",
                        "\"init\""
                    ],
                    "; getters and setters have the kind values ",
                    [
                        "inlinecode",
                        "\"get\""
                    ],
                    " and ",
                    [
                        "inlinecode",
                        "\"set\""
                    ],
                    ", respectively."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/FunctionExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface FunctionExpression <: Function, Expression {\n    type: \"FunctionExpression\";\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "function"
                    ],
                    " expression."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/Unary operations": {
        "content": [
            {
                "content": [],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/Unary operations/UnaryExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface UnaryExpression <: Expression {\n    type: \"UnaryExpression\";\n    operator: UnaryOperator;\n    prefix: boolean;\n    argument: Expression;\n}\n"
                    ],
                    "A unary operator expression."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface UnaryExpression <: Expression {\n    type: \"UnaryExpression\";\n    operator: UnaryOperator;\n    prefix: boolean;\n    argument: Expression;\n}\n"
                    ],
                    "A unary operator expression."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/Unary operations/UnaryExpression/UnaryOperator": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nenum UnaryOperator {\n    \"-\" | \"+\" | \"!\" | \"~\" | \"typeof\" | \"void\" | \"delete\"\n}\n"
                    ],
                    "A unary operator token."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nenum UnaryOperator {\n    \"-\" | \"+\" | \"!\" | \"~\" | \"typeof\" | \"void\" | \"delete\"\n}\n"
                    ],
                    "A unary operator token."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nenum UnaryOperator {\n    \"-\" | \"+\" | \"!\" | \"~\" | \"typeof\" | \"void\" | \"delete\"\n}\n"
                    ],
                    "A unary operator token."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nenum UnaryOperator {\n    \"-\" | \"+\" | \"!\" | \"~\" | \"typeof\" | \"void\" | \"delete\"\n}\n"
                    ],
                    "A unary operator token."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/Unary operations/UpdateExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface UpdateExpression <: Expression {\n    type: \"UpdateExpression\";\n    operator: UpdateOperator;\n    argument: Expression;\n    prefix: boolean;\n}\n"
                    ],
                    "An update (increment or decrement) operator expression."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/Unary operations/UpdateExpression/UpdateOperator": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nenum UpdateOperator {\n    \"++\" | \"--\"\n}\n"
                    ],
                    "An update (increment or decrement) operator token."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nenum UpdateOperator {\n    \"++\" | \"--\"\n}\n"
                    ],
                    "An update (increment or decrement) operator token."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/Binary operations": {
        "content": [
            {
                "content": [],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/Binary operations/BinaryExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface BinaryExpression <: Expression {\n    type: \"BinaryExpression\";\n    operator: BinaryOperator;\n    left: Expression;\n    right: Expression;\n}\n"
                    ],
                    "A binary operator expression."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface BinaryExpression <: Expression {\n    type: \"BinaryExpression\";\n    operator: BinaryOperator;\n    left: Expression;\n    right: Expression;\n}\n"
                    ],
                    "A binary operator expression."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/Binary operations/BinaryExpression/BinaryOperator": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nenum BinaryOperator {\n    \"==\" | \"!=\" | \"===\" | \"!==\"\n         | \"<\" | \"<=\" | \">\" | \">=\"\n         | \"<<\" | \">>\" | \">>>\"\n         | \"+\" | \"-\" | \"*\" | \"/\" | \"%\"\n         | \"|\" | \"^\" | \"&\" | \"in\"\n         | \"instanceof\"\n}\n"
                    ],
                    "A binary operator token."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nenum BinaryOperator {\n    \"==\" | \"!=\" | \"===\" | \"!==\"\n         | \"<\" | \"<=\" | \">\" | \">=\"\n         | \"<<\" | \">>\" | \">>>\"\n         | \"+\" | \"-\" | \"*\" | \"/\" | \"%\"\n         | \"|\" | \"^\" | \"&\" | \"in\"\n         | \"instanceof\"\n}\n"
                    ],
                    "A binary operator token."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nenum BinaryOperator {\n    \"==\" | \"!=\" | \"===\" | \"!==\"\n         | \"<\" | \"<=\" | \">\" | \">=\"\n         | \"<<\" | \">>\" | \">>>\"\n         | \"+\" | \"-\" | \"*\" | \"/\" | \"%\"\n         | \"|\" | \"^\" | \"&\" | \"in\"\n         | \"instanceof\"\n}\n"
                    ],
                    "A binary operator token."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nenum BinaryOperator {\n    \"==\" | \"!=\" | \"===\" | \"!==\"\n         | \"<\" | \"<=\" | \">\" | \">=\"\n         | \"<<\" | \">>\" | \">>>\"\n         | \"+\" | \"-\" | \"*\" | \"/\" | \"%\"\n         | \"|\" | \"^\" | \"&\" | \"in\"\n         | \"instanceof\"\n}\n"
                    ],
                    "A binary operator token."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/Binary operations/AssignmentExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface AssignmentExpression <: Expression {\n    type: \"AssignmentExpression\";\n    operator: AssignmentOperator;\n    left: Pattern | Expression;\n    right: Expression;\n}\n"
                    ],
                    "An assignment operator expression."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/Binary operations/AssignmentExpression/AssignmentOperator": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nenum AssignmentOperator {\n    \"=\" | \"+=\" | \"-=\" | \"*=\" | \"/=\" | \"%=\"\n        | \"<<=\" | \">>=\" | \">>>=\"\n        | \"|=\" | \"^=\" | \"&=\"\n}\n"
                    ],
                    "An assignment operator token."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nenum AssignmentOperator {\n    \"=\" | \"+=\" | \"-=\" | \"*=\" | \"/=\" | \"%=\"\n        | \"<<=\" | \">>=\" | \">>>=\"\n        | \"|=\" | \"^=\" | \"&=\"\n}\n"
                    ],
                    "An assignment operator token."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/Binary operations/LogicalExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface LogicalExpression <: Expression {\n    type: \"LogicalExpression\";\n    operator: LogicalOperator;\n    left: Expression;\n    right: Expression;\n}\n"
                    ],
                    "A logical operator expression."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/Binary operations/LogicalExpression/LogicalOperator": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nenum LogicalOperator {\n    \"||\" | \"&&\"\n}\n"
                    ],
                    "A logical operator token."
                ],
                "file": "/es5.md"
            },
            {
                "content": [
                    [
                        "inlinecode",
                        "js\nenum LogicalOperator {\n    \"||\" | \"&&\"\n}\n"
                    ],
                    "A logical operator token."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/Binary operations/MemberExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface MemberExpression <: Expression, Pattern {\n    type: \"MemberExpression\";\n    object: Expression;\n    property: Expression;\n    computed: boolean;\n}\n"
                    ],
                    "A member expression. If ",
                    [
                        "inlinecode",
                        "computed"
                    ],
                    " is ",
                    [
                        "inlinecode",
                        "true"
                    ],
                    ", the node corresponds to a computed (",
                    [
                        "inlinecode",
                        "a[b]"
                    ],
                    ") member expression and ",
                    [
                        "inlinecode",
                        "property"
                    ],
                    " is an ",
                    [
                        "inlinecode",
                        "Expression"
                    ],
                    ". If ",
                    [
                        "inlinecode",
                        "computed"
                    ],
                    " is ",
                    [
                        "inlinecode",
                        "false"
                    ],
                    ", the node corresponds to a static (",
                    [
                        "inlinecode",
                        "a.b"
                    ],
                    ") member expression and ",
                    [
                        "inlinecode",
                        "property"
                    ],
                    " is an ",
                    [
                        "inlinecode",
                        "Identifier"
                    ],
                    "."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/ConditionalExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface ConditionalExpression <: Expression {\n    type: \"ConditionalExpression\";\n    test: Expression;\n    alternate: Expression;\n    consequent: Expression;\n}\n"
                    ],
                    "A conditional expression, i.e., a ternary ",
                    [
                        "inlinecode",
                        "?"
                    ],
                    "/",
                    [
                        "inlinecode",
                        ":"
                    ],
                    " expression."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/CallExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface CallExpression <: Expression {\n    type: \"CallExpression\";\n    callee: Expression;\n    arguments: [ Expression ];\n}\n"
                    ],
                    "A function or method call expression."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/NewExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface NewExpression <: Expression {\n    type: \"NewExpression\";\n    callee: Expression;\n    arguments: [ Expression ];\n}\n"
                    ],
                    "A ",
                    [
                        "inlinecode",
                        "new"
                    ],
                    " expression."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Expressions/SequenceExpression": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface SequenceExpression <: Expression {\n    type: \"SequenceExpression\";\n    expressions: [ Expression ];\n}\n"
                    ],
                    "A sequence expression, i.e., a comma-separated sequence of expressions."
                ],
                "file": "/es5.md"
            }
        ],
        "children": []
    },
    "Type Annotations": {
        "content": [
            {
                "content": [
                    [
                        "inlinecode",
                        "js\ninterface TypeAnnotation <: Node { }\n"
                    ],
                    "Any type annotation."
                ],
                "file": "/extensions/type-annotations.md"
            }
        ],
        "children": []
    }
}