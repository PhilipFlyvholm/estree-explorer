{"Programs":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">Program</span> {\n    <span class=\"hljs-attr\">sourceType</span>: <span class=\"hljs-string\">&quot;script&quot;</span> | <span class=\"hljs-string\">&quot;module&quot;</span>;\n    <span class=\"hljs-attr\">body</span>: [ <span class=\"hljs-title class_\">Statement</span> | <span class=\"hljs-title class_\">ModuleDeclaration</span> ];\n}\n</code></pre>","<p>Parsers must specify <code>sourceType</code> as <code>\"module\"</code> if the source has been parsed as an ES6 module. Otherwise, <code>sourceType</code> must be <code>\"script\"</code>.</p>"],"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">Program</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Program&quot;</span>;\n    <span class=\"hljs-attr\">body</span>: [ <span class=\"hljs-title class_\">Directive</span> | <span class=\"hljs-title class_\">Statement</span> ];\n}\n</code></pre>","<p>A complete program source tree.</p>"]},"mdn":{"score":15.79524,"url":"https://developer.mozilla.org/en-US/docs/Web"}},"Functions":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">Function</span> {\n    <span class=\"hljs-attr\">generator</span>: boolean;\n}\n</code></pre>"],"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">Function</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">Identifier</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">params</span>: [ <span class=\"hljs-title class_\">Pattern</span> ];\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">FunctionBody</span>;\n}\n</code></pre>","<p>A function <a href=#functiondeclaration>declaration</a> or <a href=#functionexpression>expression</a>.</p>"],"/extensions/type-annotations.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">Function</span> {\n    <span class=\"hljs-attr\">returnType</span>: <span class=\"hljs-title class_\">TypeAnnotation</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>","<p>The <code>returnType</code> property is used to specify the type annotation for the return value of the function.</p>"]},"mdn":{"score":64.551155,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions"}},"Statements/ForOfStatement":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ForOfStatement</span> &lt;: <span class=\"hljs-title class_\">ForInStatement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ForOfStatement&quot;</span>;\n}\n</code></pre>"]},"mdn":{"score":73.13198,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"}},"Declarations/VariableDeclaration":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">VariableDeclaration</span> {\n    <span class=\"hljs-attr\">kind</span>: <span class=\"hljs-string\">&quot;var&quot;</span> | <span class=\"hljs-string\">&quot;let&quot;</span> | <span class=\"hljs-string\">&quot;const&quot;</span>;\n}\n</code></pre>"],"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">VariableDeclaration</span> &lt;: <span class=\"hljs-title class_\">Declaration</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;VariableDeclaration&quot;</span>;\n    <span class=\"hljs-attr\">declarations</span>: [ <span class=\"hljs-title class_\">VariableDeclarator</span> ];\n    <span class=\"hljs-attr\">kind</span>: <span class=\"hljs-string\">&quot;var&quot;</span>;\n}\n</code></pre>","<p>A variable declaration.</p>"]},"mdn":{"score":56.795486,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Variable"}},"Expressions":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">Super</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Super&quot;</span>;\n}\n\nextend interface <span class=\"hljs-title class_\">CallExpression</span> {\n    <span class=\"hljs-attr\">callee</span>: <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-title class_\">Super</span>;\n    <span class=\"hljs-attr\">arguments</span>: [ <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-title class_\">SpreadElement</span> ];\n}\n\nextend interface <span class=\"hljs-title class_\">MemberExpression</span> {\n    <span class=\"hljs-attr\">object</span>: <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-title class_\">Super</span>;\n}\n</code></pre>","<p>A <code>super</code> pseudo-expression.</p>","<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">SpreadElement</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;SpreadElement&quot;</span>;\n    <span class=\"hljs-attr\">argument</span>: <span class=\"hljs-title class_\">Expression</span>;\n}\n\nextend interface <span class=\"hljs-title class_\">ArrayExpression</span> {\n    <span class=\"hljs-attr\">elements</span>: [ <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-title class_\">SpreadElement</span> | <span class=\"hljs-literal\">null</span> ];\n}\n\nextend interface <span class=\"hljs-title class_\">NewExpression</span> {\n    <span class=\"hljs-attr\">arguments</span>: [ <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-title class_\">SpreadElement</span> ];\n}\n</code></pre>","<p>Spread expression, e.g., <code>[head, ...iter, tail]</code>, <code>f(head, ...iter, ...tail)</code>.</p>","<strong>FIXME:</strong> This describes the Esprima and Acorn behaviors, which is not currently aligned with the SpiderMonkey behavior.","<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">AssignmentExpression</span> {\n    <span class=\"hljs-attr\">left</span>: <span class=\"hljs-title class_\">Pattern</span>;\n}\n</code></pre>","<p>Note that pre-ES6 code was allowed <a href=https://github.com/estree/estree/pull/20#issuecomment-74584758>to pass references around</a> and so <code>left</code> was much more liberal; an implementation might choose to continue using <a href=https://github.com/estree/estree/blob/master/es5.md#assignmentexpression>old definition</a> if it needs to support such legacy code.</p>","<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">Property</span> {\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">method</span>: boolean;\n    <span class=\"hljs-attr\">shorthand</span>: boolean;\n    <span class=\"hljs-attr\">computed</span>: boolean;\n}\n</code></pre>"],"/es2018.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">ObjectExpression</span> {\n    <span class=\"hljs-attr\">properties</span>: [ <span class=\"hljs-title class_\">Property</span> | <span class=\"hljs-title class_\">SpreadElement</span> ];\n}\n</code></pre>","<p>Spread properties, e.g., <code>{a: 1, ...obj, b: 2}</code>.</p>"],"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">Expression</span> &lt;: <span class=\"hljs-title class_\">Node</span> { }\n</code></pre>","<p>Any expression node. Since the left-hand side of an assignment may be any expression in general, an expression can also be a pattern.</p>"]},"mdn":{"score":63.958412,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions"}},"Expressions/ArrowFunctionExpression":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ArrowFunctionExpression</span> &lt;: <span class=\"hljs-title class_\">Function</span>, <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ArrowFunctionExpression&quot;</span>;\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">FunctionBody</span> | <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">expression</span>: boolean;\n    <span class=\"hljs-attr\">generator</span>: <span class=\"hljs-literal\">false</span>;\n}\n</code></pre>","<p>A fat arrow function expression, e.g., <code>let foo = (bar) => { /* body */ }</code>.</p>"]},"mdn":{"score":107.63291,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"}},"Expressions/YieldExpression":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">YieldExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;YieldExpression&quot;</span>;\n    <span class=\"hljs-attr\">argument</span>: <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">delegate</span>: boolean;\n}\n</code></pre>","<p>A <code>yield</code> expression.</p>"]},"mdn":{"score":79.84579,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield"}},"Template Literals/TemplateLiteral":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">TemplateLiteral</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;TemplateLiteral&quot;</span>;\n    <span class=\"hljs-attr\">quasis</span>: [ <span class=\"hljs-title class_\">TemplateElement</span> ];\n    <span class=\"hljs-attr\">expressions</span>: [ <span class=\"hljs-title class_\">Expression</span> ];\n}\n</code></pre>"]},"mdn":{"score":65.66546,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Literal"}},"Template Literals/TaggedTemplateExpression":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">TaggedTemplateExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;TaggedTemplateExpression&quot;</span>;\n    <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">quasi</span>: <span class=\"hljs-title class_\">TemplateLiteral</span>;\n}\n</code></pre>"]},"mdn":{"score":78.00451,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"}},"Template Literals/TemplateElement":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">TemplateElement</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;TemplateElement&quot;</span>;\n    <span class=\"hljs-attr\">tail</span>: boolean;\n    <span class=\"hljs-attr\">value</span>: {\n        <span class=\"hljs-attr\">cooked</span>: string;\n        <span class=\"hljs-attr\">raw</span>: string;\n    };\n}\n</code></pre>"]},"mdn":{"score":68.87186,"url":"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template"}},"Patterns/ObjectPattern":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">AssignmentProperty</span> &lt;: <span class=\"hljs-title class_\">Property</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Property&quot;</span>; <span class=\"hljs-comment\">// inherited</span>\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-title class_\">Pattern</span>;\n    <span class=\"hljs-attr\">kind</span>: <span class=\"hljs-string\">&quot;init&quot;</span>;\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-literal\">false</span>;\n}\n\ninterface <span class=\"hljs-title class_\">ObjectPattern</span> &lt;: <span class=\"hljs-title class_\">Pattern</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ObjectPattern&quot;</span>;\n    <span class=\"hljs-attr\">properties</span>: [ <span class=\"hljs-title class_\">AssignmentProperty</span> ];\n}\n</code></pre>"],"/extensions/type-annotations.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">ObjectPattern</span> {\n    <span class=\"hljs-attr\">typeAnnotation</span>: <span class=\"hljs-title class_\">TypeAnnotation</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>"]},"mdn":{"score":63.544838,"url":"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/pattern"}},"Patterns/ArrayPattern":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ArrayPattern</span> &lt;: <span class=\"hljs-title class_\">Pattern</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ArrayPattern&quot;</span>;\n    <span class=\"hljs-attr\">elements</span>: [ <span class=\"hljs-title class_\">Pattern</span> | <span class=\"hljs-literal\">null</span> ];\n}\n</code></pre>"],"/extensions/type-annotations.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">ArrayPattern</span> {\n    <span class=\"hljs-attr\">typeAnnotation</span>: <span class=\"hljs-title class_\">TypeAnnotation</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>"]},"mdn":{"score":60.37452,"url":"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/pattern"}},"Patterns/RestElement":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">RestElement</span> &lt;: <span class=\"hljs-title class_\">Pattern</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;RestElement&quot;</span>;\n    <span class=\"hljs-attr\">argument</span>: <span class=\"hljs-title class_\">Pattern</span>;\n}\n</code></pre>"],"/extensions/type-annotations.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">RestElement</span> {\n    <span class=\"hljs-attr\">typeAnnotation</span>: <span class=\"hljs-title class_\">TypeAnnotation</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>"]},"mdn":{"score":67.66945,"url":"https://developer.mozilla.org/en-US/docs/Glossary/REST"}},"Patterns/AssignmentPattern":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">AssignmentPattern</span> &lt;: <span class=\"hljs-title class_\">Pattern</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;AssignmentPattern&quot;</span>;\n    <span class=\"hljs-attr\">left</span>: <span class=\"hljs-title class_\">Pattern</span>;\n    <span class=\"hljs-attr\">right</span>: <span class=\"hljs-title class_\">Expression</span>;\n}\n</code></pre>"]},"mdn":{"score":61.324066,"url":"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/pattern"}},"Classes":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">Class</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">Identifier</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">superClass</span>: <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">ClassBody</span>;\n}\n</code></pre>"],"/es2022.md":["<p>These language extensions cover following class features proposals:</p>","<ul><li><a href=https://github.com/tc39/proposal-class-fields>Class Fields</a></li><li><a href=https://github.com/tc39/proposal-static-class-features/>Static Class Features</a></li><li><a href=https://github.com/tc39/proposal-private-methods>Private Methods</a></li><li><a href=https://github.com/tc39/proposal-class-static-block>Static Initialization Blocks</a>.</li></ul>"]},"mdn":{"score":66.296906,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"}},"Classes/ClassBody":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ClassBody</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ClassBody&quot;</span>;\n    <span class=\"hljs-attr\">body</span>: [ <span class=\"hljs-title class_\">MethodDefinition</span> ];\n}\n</code></pre>"],"/es2022.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">ClassBody</span> {\n    <span class=\"hljs-attr\">body</span>: [ <span class=\"hljs-title class_\">MethodDefinition</span> | <span class=\"hljs-title class_\">PropertyDefinition</span> | <span class=\"hljs-title class_\">StaticBlock</span> ];\n}\n</code></pre>"]},"mdn":{"score":53.807133,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class"}},"Classes/MethodDefinition":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">MethodDefinition</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;MethodDefinition&quot;</span>;\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-title class_\">FunctionExpression</span>;\n    <span class=\"hljs-attr\">kind</span>: <span class=\"hljs-string\">&quot;constructor&quot;</span> | <span class=\"hljs-string\">&quot;method&quot;</span> | <span class=\"hljs-string\">&quot;get&quot;</span> | <span class=\"hljs-string\">&quot;set&quot;</span>;\n    <span class=\"hljs-attr\">computed</span>: boolean;\n    <span class=\"hljs-attr\">static</span>: boolean;\n}\n</code></pre>"],"/es2022.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">MethodDefinition</span> {\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-title class_\">PrivateIdentifier</span>;\n}\n</code></pre>","<ul><li><p>When <code>key</code> is a <code>PrivateIdentifier</code>, <code>computed</code> must be <code>false</code> and <code>kind</code> can not be <code>\"constructor\"</code>.</p></li></ul>"]},"mdn":{"score":58.262188,"url":"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn"}},"Classes/ClassDeclaration":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ClassDeclaration</span> &lt;: <span class=\"hljs-title class_\">Class</span>, <span class=\"hljs-title class_\">Declaration</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ClassDeclaration&quot;</span>;\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">Identifier</span>;\n}\n</code></pre>"]},"mdn":{"score":56.994717,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class"}},"Classes/ClassExpression":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ClassExpression</span> &lt;: <span class=\"hljs-title class_\">Class</span>, <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ClassExpression&quot;</span>;\n}\n</code></pre>"]},"mdn":{"score":94.6872,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class"}},"Classes/MetaProperty":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">MetaProperty</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;MetaProperty&quot;</span>;\n    <span class=\"hljs-attr\">meta</span>: <span class=\"hljs-title class_\">Identifier</span>;\n    <span class=\"hljs-attr\">property</span>: <span class=\"hljs-title class_\">Identifier</span>;\n}\n</code></pre>","<ul><li><code>MetaProperty</code> node represents <code>new.target</code> meta property in ES2015. In the future, it will represent other meta properties as well.</li></ul>"]},"mdn":{"score":56.562805,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta"}},"Modules/ModuleDeclaration":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ModuleDeclaration</span> &lt;: <span class=\"hljs-title class_\">Node</span> { }\n</code></pre>","<p>A module <code>import</code> or <code>export</code> declaration.</p>"]},"mdn":{"score":51.31262,"url":"https://developer.mozilla.org/en-US/docs/Web/API/GPUShaderModule"}},"Modules/ModuleSpecifier":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ModuleSpecifier</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">local</span>: <span class=\"hljs-title class_\">Identifier</span>;\n}\n</code></pre>","<p>A specifier in an import or export declaration.</p>"]},"mdn":{"score":51.31262,"url":"https://developer.mozilla.org/en-US/docs/Web/API/GPUShaderModule"}},"Modules/Imports/ImportDeclaration":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ImportDeclaration</span> &lt;: <span class=\"hljs-title class_\">ModuleDeclaration</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ImportDeclaration&quot;</span>;\n    <span class=\"hljs-attr\">specifiers</span>: [ <span class=\"hljs-title class_\">ImportSpecifier</span> | <span class=\"hljs-title class_\">ImportDefaultSpecifier</span> | <span class=\"hljs-title class_\">ImportNamespaceSpecifier</span> ];\n    <span class=\"hljs-attr\">source</span>: <span class=\"hljs-title class_\">Literal</span>;\n}\n</code></pre>","<p>An import declaration, e.g., <code>import foo from \"mod\";</code>.</p>"]},"mdn":{"score":65.34006,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"}},"Modules/Imports/ImportSpecifier":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ImportSpecifier</span> &lt;: <span class=\"hljs-title class_\">ModuleSpecifier</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ImportSpecifier&quot;</span>;\n    <span class=\"hljs-attr\">imported</span>: <span class=\"hljs-title class_\">Identifier</span>;\n}\n</code></pre>","<p>An imported variable binding, e.g., <code>{foo}</code> in <code>import {foo} from \"mod\"</code> or <code>{foo as bar}</code> in <code>import {foo as bar} from \"mod\"</code>. The <code>imported</code> field refers to the name of the export imported from the module. The <code>local</code> field refers to the binding imported into the local module scope. If it is a basic named import, such as in <code>import {foo} from \"mod\"</code>, both <code>imported</code> and <code>local</code> are equivalent <code>Identifier</code> nodes; in this case an <code>Identifier</code> node representing <code>foo</code>. If it is an aliased import, such as in <code>import {foo as bar} from \"mod\"</code>, the <code>imported</code> field is an <code>Identifier</code> node representing <code>foo</code>, and the <code>local</code> field is an <code>Identifier</code> node representing <code>bar</code>.</p>"],"/es2022.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">ImportSpecifier</span> &lt;: <span class=\"hljs-title class_\">ModuleSpecifier</span> {\n    <span class=\"hljs-attr\">imported</span>: <span class=\"hljs-title class_\">Identifier</span> | <span class=\"hljs-title class_\">Literal</span>;\n}\n</code></pre>","<p>If <code>imported</code> is a <code>Literal</code>, <code>imported.value</code> must be a string without lone surrogate.</p>"]},"mdn":{"score":66.77889,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import"}},"Modules/Imports/ImportDefaultSpecifier":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ImportDefaultSpecifier</span> &lt;: <span class=\"hljs-title class_\">ModuleSpecifier</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ImportDefaultSpecifier&quot;</span>;\n}\n</code></pre>","<p>A default import specifier, e.g., <code>foo</code> in <code>import foo from \"mod.js\"</code>.</p>"]},"mdn":{"score":71.29408,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import"}},"Modules/Imports/ImportNamespaceSpecifier":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ImportNamespaceSpecifier</span> &lt;: <span class=\"hljs-title class_\">ModuleSpecifier</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ImportNamespaceSpecifier&quot;</span>;\n}\n</code></pre>","<p>A namespace import specifier, e.g., <code>* as foo</code> in <code>import * as foo from \"mod.js\"</code>.</p>"]},"mdn":{"score":76.091034,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import"}},"Modules/Exports/ExportNamedDeclaration":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ExportNamedDeclaration</span> &lt;: <span class=\"hljs-title class_\">ModuleDeclaration</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ExportNamedDeclaration&quot;</span>;\n    <span class=\"hljs-attr\">declaration</span>: <span class=\"hljs-title class_\">Declaration</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">specifiers</span>: [ <span class=\"hljs-title class_\">ExportSpecifier</span> ];\n    <span class=\"hljs-attr\">source</span>: <span class=\"hljs-title class_\">Literal</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>","<p>An export named declaration, e.g., <code>export {foo, bar};</code>, <code>export {foo} from \"mod\";</code> or <code>export var foo = 1;</code>.</p>","<em>Note: Having <code>declaration</code> populated with non-empty <code>specifiers</code> or non-null <code>source</code> results in an invalid state.</em>"]},"mdn":{"score":86.58877,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"}},"Modules/Exports/ExportSpecifier":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ExportSpecifier</span> &lt;: <span class=\"hljs-title class_\">ModuleSpecifier</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ExportSpecifier&quot;</span>;\n    <span class=\"hljs-attr\">exported</span>: <span class=\"hljs-title class_\">Identifier</span>;\n}\n</code></pre>","<p>An exported variable binding, e.g., <code>{foo}</code> in <code>export {foo}</code> or <code>{bar as foo}</code> in <code>export {bar as foo}</code>. The <code>exported</code> field refers to the name exported in the module. The <code>local</code> field refers to the binding into the local module scope. If it is a basic named export, such as in <code>export {foo}</code>, both <code>exported</code> and <code>local</code> are equivalent <code>Identifier</code> nodes; in this case an <code>Identifier</code> node representing <code>foo</code>. If it is an aliased export, such as in <code>export {bar as foo}</code>, the <code>exported</code> field is an <code>Identifier</code> node representing <code>foo</code>, and the <code>local</code> field is an <code>Identifier</code> node representing <code>bar</code>.</p>"],"/es2022.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">ExportSpecifier</span> &lt;: <span class=\"hljs-title class_\">ModuleSpecifier</span> {\n    <span class=\"hljs-attr\">local</span>: <span class=\"hljs-title class_\">Identifier</span> | <span class=\"hljs-title class_\">Literal</span>;\n    <span class=\"hljs-attr\">exported</span>: <span class=\"hljs-title class_\">Identifier</span> | <span class=\"hljs-title class_\">Literal</span>;\n}\n</code></pre>","<code>local</code> can be <code>Literal</code> only if the <code>source</code> of the <code>ExportNamedDeclaration</code> of the parent of this node is not <code>null</code>. e.g. <code>export { \"foo\" as \"foo\" } from \"mod\"</code> is valid, <code>export { \"foo\" as \"foo\" }</code> is invalid.","<p>If <code>exported</code>/<code>local</code> is <code>Literal</code>, <code>exported.value</code>/<code>local.value</code> must be a string without lone surrogate.</p>"]},"mdn":{"score":69.90371,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"}},"Modules/Exports/ExportDefaultDeclaration":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">AnonymousDefaultExportedFunctionDeclaration</span> &lt;: <span class=\"hljs-title class_\">Function</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;FunctionDeclaration&quot;</span>;\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-literal\">null</span>;\n}\n\ninterface <span class=\"hljs-title class_\">AnonymousDefaultExportedClassDeclaration</span> &lt;: <span class=\"hljs-title class_\">Class</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ClassDeclaration&quot;</span>;\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-literal\">null</span>;\n}\n\ninterface <span class=\"hljs-title class_\">ExportDefaultDeclaration</span> &lt;: <span class=\"hljs-title class_\">ModuleDeclaration</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ExportDefaultDeclaration&quot;</span>;\n    <span class=\"hljs-attr\">declaration</span>: <span class=\"hljs-title class_\">AnonymousDefaultExportedFunctionDeclaration</span> | <span class=\"hljs-title class_\">FunctionDeclaration</span> | <span class=\"hljs-title class_\">AnonymousDefaultExportedClassDeclaration</span> | <span class=\"hljs-title class_\">ClassDeclaration</span> | <span class=\"hljs-title class_\">Expression</span>;\n}\n</code></pre>","<p>An export default declaration, e.g., <code>export default function () {};</code> or <code>export default 1;</code>.</p>"]},"mdn":{"score":82.85529,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"}},"Modules/Exports/ExportAllDeclaration":{"content":{"/es2015.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ExportAllDeclaration</span> &lt;: <span class=\"hljs-title class_\">ModuleDeclaration</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ExportAllDeclaration&quot;</span>;\n    <span class=\"hljs-attr\">source</span>: <span class=\"hljs-title class_\">Literal</span>;\n}\n</code></pre>","<p>An export batch declaration, e.g., <code>export * from \"mod\";</code>.</p>"],"/es2022.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">ExportAllDeclaration</span> {\n    <span class=\"hljs-attr\">exported</span>: <span class=\"hljs-title class_\">Identifier</span> | <span class=\"hljs-title class_\">Literal</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>","<p>If <code>exported</code> is <code>Literal</code>, <code>exported.value</code> must be a string without lone surrogate.</p>"]},"mdn":{"score":81.213326,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"}},"BinaryOperator":{"content":{"/es2016.md":["<pre><code class=\"language-js hljs\">extend enum <span class=\"hljs-title class_\">BinaryOperator</span> {\n    <span class=\"hljs-string\">&quot;**&quot;</span>\n}\n</code></pre>"]},"mdn":{"score":64.09538,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence"}},"AssignmentOperator":{"content":{"/es2016.md":["<pre><code class=\"language-js hljs\">extend enum <span class=\"hljs-title class_\">AssignmentOperator</span> {\n    <span class=\"hljs-string\">&quot;**=&quot;</span>\n}\n</code></pre>"]},"mdn":{"score":60.94838,"url":"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/operator"}},"Function":{"content":{"/es2017.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">Function</span> {\n    <span class=\"hljs-attr\">async</span>: boolean;\n}\n</code></pre>"]},"mdn":{"score":41.080173,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"}},"AwaitExpression":{"content":{"/es2017.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">AwaitExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;AwaitExpression&quot;</span>;\n    <span class=\"hljs-attr\">argument</span>: <span class=\"hljs-title class_\">Expression</span>;\n}\n</code></pre>"]},"mdn":{"score":72.1562,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await"}},"Statements":{"content":{"/es2018.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">ForOfStatement</span> {\n  <span class=\"hljs-attr\">await</span>: boolean;\n}\n</code></pre>","<code>for-await-of</code> statements, e.g., <code>for await (const x of xs) {</code>"],"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">Statement</span> &lt;: <span class=\"hljs-title class_\">Node</span> { }\n</code></pre>","<p>Any statement.</p>"]},"mdn":{"score":75.10929,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements"}},"Template Literals":{"content":{"/es2018.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">TemplateElement</span> {\n    <span class=\"hljs-attr\">value</span>: {\n        <span class=\"hljs-attr\">cooked</span>: string | <span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-attr\">raw</span>: string;\n    };\n}\n</code></pre>","<p>If the template literal is tagged and the text has an invalid escape, <code>cooked</code> will be <code>null</code>, e.g., <code>tag`\\unicode and \\u{55}` </code></p>"]},"mdn":{"score":298.7961,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"}},"Patterns":{"content":{"/es2018.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">ObjectPattern</span> {\n    <span class=\"hljs-attr\">properties</span>: [ <span class=\"hljs-title class_\">AssignmentProperty</span> | <span class=\"hljs-title class_\">RestElement</span> ];\n}\n</code></pre>","<p>Rest properties, e.g., <code>{a, ...rest} = obj</code>.</p>"],"/es5.md":["<p>Destructuring binding and assignment are not part of ES5, but all binding positions accept <code>Pattern</code> to allow for destructuring in ES6. Nevertheless, for ES5, the only <code>Pattern</code> subtype is <a href=#identifier><code>Identifier</code></a>.</p>","<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">Pattern</span> &lt;: <span class=\"hljs-title class_\">Node</span> { }\n</code></pre>"]},"mdn":{"score":75.24715,"url":"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Patterns"}},"Statements/CatchClause":{"content":{"/es2019.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">CatchClause</span> {\n    <span class=\"hljs-attr\">param</span>: <span class=\"hljs-title class_\">Pattern</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>","<p>The <code>param</code> is <code>null</code> if the <code>catch</code> binding is omitted. E.g., <code>try { foo() } catch { bar() }</code></p>"]},"mdn":{"score":71.80031,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch"}},"Literal":{"content":{"/es2020.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">Literal</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Literal&quot;</span>;\n    <span class=\"hljs-attr\">value</span>: string | boolean | <span class=\"hljs-literal\">null</span> | number | <span class=\"hljs-title class_\">RegExp</span> | bigint;\n}\n</code></pre>","<ul><li><code>value</code> property can be a <code>BigInt</code> value to represent <code>BigInt</code> literals<br/>such as <code>100n</code>.</li></ul>"],"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">Literal</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Literal&quot;</span>;\n    <span class=\"hljs-attr\">value</span>: string | boolean | <span class=\"hljs-literal\">null</span> | number | <span class=\"hljs-title class_\">RegExp</span>;\n}\n</code></pre>","<p>A literal token. Note that a literal can be an expression.</p>"]},"mdn":{"score":65.66546,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Literal"}},"Literal/BigIntLiteral":{"content":{"/es2020.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">BigIntLiteral</span> &lt;: <span class=\"hljs-title class_\">Literal</span> {\n  <span class=\"hljs-attr\">bigint</span>: string;\n}\n</code></pre>","<ul><li><code>bigint</code> property is the string representation of the <code>BigInt</code> value.<br/>It doesn't include the suffix <code>n</code>.</li><li><p>In environments that don't support <code>BigInt</code> values, <code>value</code> property will be<br/><code>null</code> as the <code>BigInt</code> value can't be represented natively.</p></li></ul>"]},"mdn":{"score":104.81054,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"}},"Expressions/ChainExpression":{"content":{"/es2020.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ChainExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ChainExpression&quot;</span>;\n  <span class=\"hljs-attr\">expression</span>: <span class=\"hljs-title class_\">ChainElement</span>;\n}\n\ninterface <span class=\"hljs-title class_\">ChainElement</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n  <span class=\"hljs-attr\">optional</span>: boolean;\n}\n\nextend interface <span class=\"hljs-title class_\">CallExpression</span> &lt;: <span class=\"hljs-title class_\">ChainElement</span> {}\n\nextend interface <span class=\"hljs-title class_\">MemberExpression</span> &lt;: <span class=\"hljs-title class_\">ChainElement</span> {}\n</code></pre>","<ul><li><p>The <code>ChainExpression</code> node is the root of optional chaining.</p></li><li><p>The <code>ChainExpression</code> node contains one or more <code>ChainElement</code> nodes that are <code>optional:true</code>. On the other hand, <code>ChainElement</code> nodes that are <code>optional:true</code> belong to a <code>ChainExpression</code> node.</p></li><li><p>For backward compatibility, if all <code>ChainElement</code> nodes of a chain are <code>optional:false</code>, the <code>ChainExpression</code> node isn't inserted as the root of the chain.</p></li><li><p>Evaluation:</p><ul><li><p>The <code>ChainExpression</code> node is evaluated to the result of the <code>expression</code> property's node.</p></li><li><p>If the <code>callee|object</code> property is evaluated to nullish and the <code>optional</code> property is <code>true</code>, then the node and ancestor nodes are skipped until the closest <code>ChainExpression</code> node, and the result of the <code>ChainExpression</code> node becomes <code>undefined</code>.</p></li></ul></li></ul>","<details><summary>For Examples:</summary>","<pre><code class=\"language-jsonc hljs\"><span class=\"hljs-comment\">// obj.aaa.bbb</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;obj&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;bbb&quot;</span> <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>","<pre><code class=\"language-jsonc hljs\"><span class=\"hljs-comment\">// obj.aaa?.bbb</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ChainExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;expression&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;obj&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;bbb&quot;</span> <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>","<pre><code class=\"language-jsonc hljs\"><span class=\"hljs-comment\">// obj?.aaa.bbb</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ChainExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;expression&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;obj&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;bbb&quot;</span> <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>","<pre><code class=\"language-jsonc hljs\"><span class=\"hljs-comment\">// obj?.aaa?.bbb</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ChainExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;expression&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;obj&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;bbb&quot;</span> <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>","<pre><code class=\"language-jsonc hljs\"><span class=\"hljs-comment\">// (obj.aaa).bbb</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;obj&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;bbb&quot;</span> <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>","<pre><code class=\"language-jsonc hljs\"><span class=\"hljs-comment\">// (obj.aaa)?.bbb</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ChainExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;expression&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;obj&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;bbb&quot;</span> <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>","<pre><code class=\"language-jsonc hljs\"><span class=\"hljs-comment\">// (obj?.aaa).bbb</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ChainExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;expression&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;obj&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;bbb&quot;</span> <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>","<pre><code class=\"language-jsonc hljs\"><span class=\"hljs-comment\">// (obj?.aaa)?.bbb</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ChainExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;expression&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ChainExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;expression&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;MemberExpression&quot;</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">&quot;optional&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">&quot;object&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;obj&quot;</span> <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-punctuation\">}</span>\n      <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;property&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span> <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Identifier&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;bbb&quot;</span> <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>","</details>"]},"mdn":{"score":71.86184,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain"}},"Expressions/ImportExpression":{"content":{"/es2020.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ImportExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ImportExpression&quot;</span>;\n  <span class=\"hljs-attr\">source</span>: <span class=\"hljs-title class_\">Expression</span>;\n}\n</code></pre>","<ul><li><code>ImportExpression</code> node represents Dynamic Imports such as <code>import(source)</code>.<br/>The <code>source</code> property is the importing source as similar to <a href=es2015.md#importdeclaration>ImportDeclaration</a><br/>node, but it can be an arbitrary expression node.</li></ul>"]},"mdn":{"score":62.758896,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import"}},"Expressions/LogicalExpression":{"content":{"/es2020.md":["<pre><code class=\"language-js hljs\">extend enum <span class=\"hljs-title class_\">LogicalOperator</span> {\n    <span class=\"hljs-string\">&quot;??&quot;</span>\n}\n</code></pre>","<ul><li><p>The <code>operator</code> property of the <code>LogicalExpression</code> node can be <code>\"??\"</code> to represent <a href=https://github.com/tc39/proposal-nullish-coalescing>Nullish Coalescing</a> syntax.</p></li></ul>"]},"mdn":{"score":71.37319,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND"}},"Expressions/MetaProperty":{"content":{"/es2020.md":["<p>Existing <a href=es2015.md#metaproperty>MetaProperty</a> node represents <code>import.meta</code> meta property as well.</p>"]},"mdn":{"score":56.562805,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta"}},"Modules/ExportAllDeclaration":{"content":{"/es2020.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">ExportAllDeclaration</span> {\n  <span class=\"hljs-attr\">exported</span>: <span class=\"hljs-title class_\">Identifier</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>","<p>The <code>exported</code> property contains an <code>Identifier</code> when a different exported name is specified using <code>as</code>, e.g., <code>export * as foo from \"mod\";</code>.</p>"]},"mdn":{"score":81.213326,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"}},"Expressions/AssignmentOperator":{"content":{"/es2021.md":["<pre><code class=\"language-js hljs\">extend enum <span class=\"hljs-title class_\">AssignmentOperator</span> {\n    <span class=\"hljs-string\">&quot;||=&quot;</span> | <span class=\"hljs-string\">&quot;&amp;&amp;=&quot;</span> | <span class=\"hljs-string\">&quot;??=&quot;</span>\n}\n</code></pre>","<ul><li><a href=../es5.md#AssignmentExpression>AssignmentExpression</a> node has short-circuiting behavior if the <code>operator</code><br/>property is any of <code>\"||=\"</code>,<code>\"&&=\"</code>, and <code>\"??=\"</code>.</li><li><p>See <a href=https://github.com/tc39/proposal-logical-assignment>Logical Assignment Operators</a> for details.</p></li></ul>"]},"mdn":{"score":60.94838,"url":"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/operator"}},"Classes/PropertyDefinition":{"content":{"/es2022.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">PropertyDefinition</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;PropertyDefinition&quot;</span>;\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-title class_\">PrivateIdentifier</span>;\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">computed</span>: boolean;\n    <span class=\"hljs-attr\">static</span>: boolean;\n}\n</code></pre>","<ul><li><p>When <code>key</code> is a <code>PrivateIdentifier</code>, <code>computed</code> must be <code>false</code>.</p></li></ul>"]},"mdn":{"score":61.74893,"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax"}},"Classes/MethodDefinition/PrivateIdentifier":{"content":{"/es2022.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">PrivateIdentifier</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;PrivateIdentifier&quot;</span>;\n    <span class=\"hljs-attr\">name</span>: string;\n}\n</code></pre>","<p>A private identifier refers to private class elements. For a private name <code>#a</code>, its <code>name</code> is <code>a</code>.</p>","<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">MemberExpression</span> {\n    <span class=\"hljs-attr\">property</span>: <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-title class_\">PrivateIdentifier</span>;\n}\n</code></pre>","<ul><li><p>When <code>property</code> is a <code>PrivateIdentifier</code>, <code>computed</code> must be <code>false</code>.</p></li><li><p>When <code>object</code> is a <code>Super</code>, <code>property</code> can not be a <code>PrivateIdentifier</code>.</p></li></ul>"]},"mdn":{"score":68.454254,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields"}},"Classes/StaticBlock":{"content":{"/es2022.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">StaticBlock</span> &lt;: <span class=\"hljs-title class_\">BlockStatement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;StaticBlock&quot;</span>;\n}\n</code></pre>","<p>A static block <code>static { }</code> is a block statement serving as an additional static initializer.</p>"]},"mdn":{"score":57.589138,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static"}},"Classes/Expressions/BinaryExpression":{"content":{"/es2022.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">BinaryExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">left</span>: <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-title class_\">PrivateIdentifier</span>;\n}\n</code></pre>","<ul><li><code>left</code> can be a private identifier (e.g. <code>#foo</code>) when <code>operator</code> is <code>\"in\"</code>.</li><li><p>See <a href=https://github.com/tc39/proposal-private-fields-in-in>Ergonomic brand checks for Private Fields</a> for details.</p></li></ul>"]},"mdn":{"score":51.778336,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function"}},"Modules":{"content":{"/es2022.md":["<p>See <a href=https://github.com/tc39/ecma262/pull/2154>Arbitrary module namespace identifier names</a> for more details.</p>"]},"mdn":{"score":62.048576,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"}},"Node objects":{"content":{"/es5.md":["<p>ESTree AST nodes are represented as <code>Node</code> objects, which may have any prototype inheritance but which implement the following interface:</p>","<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">type</span>: string;\n    <span class=\"hljs-attr\">loc</span>: <span class=\"hljs-title class_\">SourceLocation</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>","<p>The <code>type</code> field is a string representing the AST variant type. Each subtype of <code>Node</code> is documented below with the specific string of its <code>type</code> field. You can use this field to determine which interface a node implements.</p>","<p>The <code>loc</code> field represents the source location information of the node. If the node contains no information about the source location, the field is <code>null</code>; otherwise it is an object consisting of a start position (the position of the first character of the parsed source region) and an end position (the position of the first character after the parsed source region):</p>","<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">SourceLocation</span> {\n    <span class=\"hljs-attr\">source</span>: string | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">start</span>: <span class=\"hljs-title class_\">Position</span>;\n    <span class=\"hljs-attr\">end</span>: <span class=\"hljs-title class_\">Position</span>;\n}\n</code></pre>","<p>Each <code>Position</code> object consists of a <code>line</code> number (1-indexed) and a <code>column</code> number (0-indexed):</p>","<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">Position</span> {\n    <span class=\"hljs-attr\">line</span>: number; <span class=\"hljs-comment\">// &gt;= 1</span>\n    <span class=\"hljs-attr\">column</span>: number; <span class=\"hljs-comment\">// &gt;= 0</span>\n}\n</code></pre>"]},"mdn":{"score":58.472855,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Transferable_objects"}},"Identifier":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">Identifier</span> &lt;: <span class=\"hljs-title class_\">Expression</span>, <span class=\"hljs-title class_\">Pattern</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Identifier&quot;</span>;\n    <span class=\"hljs-attr\">name</span>: string;\n}\n</code></pre>","<p>An identifier. Note that an identifier may be an expression or a destructuring pattern.</p>"],"/extensions/type-annotations.md":["<pre><code class=\"language-js hljs\">extend interface <span class=\"hljs-title class_\">Identifier</span> {\n    <span class=\"hljs-attr\">typeAnnotation</span>: <span class=\"hljs-title class_\">TypeAnnotation</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>","<p>The <code>typeAnnotation</code> property is used only in the case of variable declarations with type annotations or function arguments with type annotations.</p>"]},"mdn":{"score":61.418102,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Identifier"}},"Literal/RegExpLiteral":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">RegExpLiteral</span> &lt;: <span class=\"hljs-title class_\">Literal</span> {\n  <span class=\"hljs-attr\">regex</span>: {\n    <span class=\"hljs-attr\">pattern</span>: string;\n    <span class=\"hljs-attr\">flags</span>: string;\n  };\n}\n</code></pre>","<p>The <code>regex</code> property allows regexes to be represented in environments that don’t<br/>support certain flags such as <code>y</code> or <code>u</code>. In environments that don't support<br/>these flags <code>value</code> will be <code>null</code> as the regex can't be represented natively.</p>"]},"mdn":{"score":98.73247,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"}},"Statements/ExpressionStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ExpressionStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ExpressionStatement&quot;</span>;\n    <span class=\"hljs-attr\">expression</span>: <span class=\"hljs-title class_\">Expression</span>;\n}\n</code></pre>","<p>An expression statement, i.e., a statement consisting of a single expression.</p>"]},"mdn":{"score":106.502335,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement"}},"Statements/Directive":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">Directive</span> &lt;: <span class=\"hljs-title class_\">ExpressionStatement</span> {\n    <span class=\"hljs-attr\">expression</span>: <span class=\"hljs-title class_\">Literal</span>;\n    <span class=\"hljs-attr\">directive</span>: string;\n}\n</code></pre>","<p>A directive from the directive prologue of a script or function.<br/>The <code>directive</code> property is the raw string source of the directive without quotes.</p>"]},"mdn":{"score":56.182858,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Fetch_directive"}},"Statements/BlockStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">BlockStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;BlockStatement&quot;</span>;\n    <span class=\"hljs-attr\">body</span>: [ <span class=\"hljs-title class_\">Statement</span> ];\n}\n</code></pre>","<p>A block statement, i.e., a sequence of statements surrounded by braces.</p>"]},"mdn":{"score":94.18697,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block"}},"Statements/FunctionBody":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">FunctionBody</span> &lt;: <span class=\"hljs-title class_\">BlockStatement</span> {\n    <span class=\"hljs-attr\">body</span>: [ <span class=\"hljs-title class_\">Directive</span> | <span class=\"hljs-title class_\">Statement</span> ];\n}\n</code></pre>","<p>The body of a function, which is a block statement that may begin with directives.</p>"]},"mdn":{"score":55.807335,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body"}},"Statements/EmptyStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">EmptyStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;EmptyStatement&quot;</span>;\n}\n</code></pre>","<p>An empty statement, i.e., a solitary semicolon.</p>"]},"mdn":{"score":107.78819,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty"}},"Statements/DebuggerStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">DebuggerStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;DebuggerStatement&quot;</span>;\n}\n</code></pre>","<p>A <code>debugger</code> statement.</p>"]},"mdn":{"score":81.30349,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger"}},"Statements/WithStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">WithStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;WithStatement&quot;</span>;\n    <span class=\"hljs-attr\">object</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Statement</span>;\n}\n</code></pre>","<p>A <code>with</code> statement.</p>"]},"mdn":{"score":60.422028,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Statement"}},"Statements/Control flow/ReturnStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ReturnStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ReturnStatement&quot;</span>;\n    <span class=\"hljs-attr\">argument</span>: <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>","<p>A <code>return</code> statement.</p>"]},"mdn":{"score":72.60053,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return"}},"Statements/Control flow/LabeledStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">LabeledStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;LabeledStatement&quot;</span>;\n    <span class=\"hljs-attr\">label</span>: <span class=\"hljs-title class_\">Identifier</span>;\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Statement</span>;\n}\n</code></pre>","<p>A labeled statement, i.e., a statement prefixed by a <code>break</code>/<code>continue</code> label.</p>"]},"mdn":{"score":132.87767,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label"}},"Statements/Control flow/BreakStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">BreakStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;BreakStatement&quot;</span>;\n    <span class=\"hljs-attr\">label</span>: <span class=\"hljs-title class_\">Identifier</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>","<p>A <code>break</code> statement.</p>"]},"mdn":{"score":65.96774,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break"}},"Statements/Control flow/ContinueStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ContinueStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ContinueStatement&quot;</span>;\n    <span class=\"hljs-attr\">label</span>: <span class=\"hljs-title class_\">Identifier</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>","<p>A <code>continue</code> statement.</p>"]},"mdn":{"score":71.99971,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue"}},"Statements/Choice/IfStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">IfStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;IfStatement&quot;</span>;\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">consequent</span>: <span class=\"hljs-title class_\">Statement</span>;\n    <span class=\"hljs-attr\">alternate</span>: <span class=\"hljs-title class_\">Statement</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>","<p>An <code>if</code> statement.</p>"]},"mdn":{"score":60.422028,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Statement"}},"Statements/Choice/SwitchStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">SwitchStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;SwitchStatement&quot;</span>;\n    <span class=\"hljs-attr\">discriminant</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">cases</span>: [ <span class=\"hljs-title class_\">SwitchCase</span> ];\n}\n</code></pre>","<p>A <code>switch</code> statement.</p>"]},"mdn":{"score":77.05162,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch"}},"Statements/Choice/SwitchStatement/SwitchCase":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">SwitchCase</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;SwitchCase&quot;</span>;\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">consequent</span>: [ <span class=\"hljs-title class_\">Statement</span> ];\n}\n</code></pre>","<p>A <code>case</code> (if <code>test</code> is an <code>Expression</code>) or <code>default</code> (if <code>test === null</code>) clause in the body of a <code>switch</code> statement.</p>"]},"mdn":{"score":73.453026,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch"}},"Statements/Exceptions/ThrowStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ThrowStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ThrowStatement&quot;</span>;\n    <span class=\"hljs-attr\">argument</span>: <span class=\"hljs-title class_\">Expression</span>;\n}\n</code></pre>","<p>A <code>throw</code> statement.</p>"]},"mdn":{"score":72.39012,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw"}},"Statements/Exceptions/TryStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">TryStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;TryStatement&quot;</span>;\n    <span class=\"hljs-attr\">block</span>: <span class=\"hljs-title class_\">BlockStatement</span>;\n    <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-title class_\">CatchClause</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">finalizer</span>: <span class=\"hljs-title class_\">BlockStatement</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>","<p>A <code>try</code> statement. If <code>handler</code> is <code>null</code> then <code>finalizer</code> must be a <code>BlockStatement</code>.</p>"]},"mdn":{"score":71.97177,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch"}},"Statements/Exceptions/TryStatement/CatchClause":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">CatchClause</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;CatchClause&quot;</span>;\n    <span class=\"hljs-attr\">param</span>: <span class=\"hljs-title class_\">Pattern</span>;\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">BlockStatement</span>;\n}\n</code></pre>","<p>A <code>catch</code> clause following a <code>try</code> block.</p>"]},"mdn":{"score":71.80031,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch"}},"Statements/Loops/WhileStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">WhileStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;WhileStatement&quot;</span>;\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Statement</span>;\n}\n</code></pre>","<p>A <code>while</code> statement.</p>"]},"mdn":{"score":70.806206,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while"}},"Statements/Loops/DoWhileStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">DoWhileStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;DoWhileStatement&quot;</span>;\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Statement</span>;\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-title class_\">Expression</span>;\n}\n</code></pre>","<p>A <code>do</code>/<code>while</code> statement.</p>"]},"mdn":{"score":108.70903,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while"}},"Statements/Loops/ForStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ForStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ForStatement&quot;</span>;\n    <span class=\"hljs-attr\">init</span>: <span class=\"hljs-title class_\">VariableDeclaration</span> | <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">update</span>: <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Statement</span>;\n}\n</code></pre>","<p>A <code>for</code> statement.</p>"]},"mdn":{"score":60.422028,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Statement"}},"Statements/Loops/ForInStatement":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ForInStatement</span> &lt;: <span class=\"hljs-title class_\">Statement</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ForInStatement&quot;</span>;\n    <span class=\"hljs-attr\">left</span>: <span class=\"hljs-title class_\">VariableDeclaration</span> |  <span class=\"hljs-title class_\">Pattern</span>;\n    <span class=\"hljs-attr\">right</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Statement</span>;\n}\n</code></pre>","<p>A <code>for</code>/<code>in</code> statement.</p>"]},"mdn":{"score":75.406334,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"}},"Declarations":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">Declaration</span> &lt;: <span class=\"hljs-title class_\">Statement</span> { }\n</code></pre>","<p>Any declaration node. Note that declarations are considered statements; this is because declarations can appear in any statement context.</p>"]},"mdn":{"score":64.15497,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements"}},"Declarations/FunctionDeclaration":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">FunctionDeclaration</span> &lt;: <span class=\"hljs-title class_\">Function</span>, <span class=\"hljs-title class_\">Declaration</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;FunctionDeclaration&quot;</span>;\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">Identifier</span>;\n}\n</code></pre>","<p>A function declaration. Note that unlike in the parent interface <code>Function</code>, the <code>id</code> cannot be <code>null</code>.</p>"]},"mdn":{"score":50.128437,"url":"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration"}},"Declarations/VariableDeclaration/VariableDeclarator":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">VariableDeclarator</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;VariableDeclarator&quot;</span>;\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">Pattern</span>;\n    <span class=\"hljs-attr\">init</span>: <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>","<p>A variable declarator.</p>"]},"mdn":{"score":56.795486,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Variable"}},"Expressions/ThisExpression":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ThisExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ThisExpression&quot;</span>;\n}\n</code></pre>","<p>A <code>this</code> expression.</p>"]},"mdn":{"score":66.59667,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this"}},"Expressions/ArrayExpression":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ArrayExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ArrayExpression&quot;</span>;\n    <span class=\"hljs-attr\">elements</span>: [ <span class=\"hljs-title class_\">Expression</span> | <span class=\"hljs-literal\">null</span> ];\n}\n</code></pre>","<p>An array expression. An element might be <code>null</code> if it represents a hole in a sparse array. E.g. <code>[1,,2]</code>.</p>"]},"mdn":{"score":56.06842,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement"}},"Expressions/ObjectExpression":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ObjectExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ObjectExpression&quot;</span>;\n    <span class=\"hljs-attr\">properties</span>: [ <span class=\"hljs-title class_\">Property</span> ];\n}\n</code></pre>","<p>An object expression.</p>"]},"mdn":{"score":54.647266,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement"}},"Expressions/ObjectExpression/Property":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">Property</span> &lt;: <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Property&quot;</span>;\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-title class_\">Literal</span> | <span class=\"hljs-title class_\">Identifier</span>;\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">kind</span>: <span class=\"hljs-string\">&quot;init&quot;</span> | <span class=\"hljs-string\">&quot;get&quot;</span> | <span class=\"hljs-string\">&quot;set&quot;</span>;\n}\n</code></pre>","<p>A literal property in an object expression can have either a string or number as its <code>value</code>. Ordinary property initializers have a <code>kind</code> value <code>\"init\"</code>; getters and setters have the kind values <code>\"get\"</code> and <code>\"set\"</code>, respectively.</p>"]},"mdn":{"score":23.18195,"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/@property"}},"Expressions/FunctionExpression":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">FunctionExpression</span> &lt;: <span class=\"hljs-title class_\">Function</span>, <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;FunctionExpression&quot;</span>;\n}\n</code></pre>","<p>A <code>function</code> expression.</p>"]},"mdn":{"score":87.52335,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function"}},"Expressions/Unary operations/UnaryExpression":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">UnaryExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;UnaryExpression&quot;</span>;\n    <span class=\"hljs-attr\">operator</span>: <span class=\"hljs-title class_\">UnaryOperator</span>;\n    <span class=\"hljs-attr\">prefix</span>: boolean;\n    <span class=\"hljs-attr\">argument</span>: <span class=\"hljs-title class_\">Expression</span>;\n}\n</code></pre>","<p>A unary operator expression.</p>"]},"mdn":{"score":71.81267,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus"}},"Expressions/Unary operations/UnaryExpression/UnaryOperator":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">enum <span class=\"hljs-title class_\">UnaryOperator</span> {\n    <span class=\"hljs-string\">&quot;-&quot;</span> | <span class=\"hljs-string\">&quot;+&quot;</span> | <span class=\"hljs-string\">&quot;!&quot;</span> | <span class=\"hljs-string\">&quot;~&quot;</span> | <span class=\"hljs-string\">&quot;typeof&quot;</span> | <span class=\"hljs-string\">&quot;void&quot;</span> | <span class=\"hljs-string\">&quot;delete&quot;</span>\n}\n</code></pre>","<p>A unary operator token.</p>"]},"mdn":{"score":80.45502,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation"}},"Expressions/Unary operations/UpdateExpression":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">UpdateExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;UpdateExpression&quot;</span>;\n    <span class=\"hljs-attr\">operator</span>: <span class=\"hljs-title class_\">UpdateOperator</span>;\n    <span class=\"hljs-attr\">argument</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">prefix</span>: boolean;\n}\n</code></pre>","<p>An update (increment or decrement) operator expression.</p>"]},"mdn":{"score":51.9328,"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/update"}},"Expressions/Unary operations/UpdateExpression/UpdateOperator":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">enum <span class=\"hljs-title class_\">UpdateOperator</span> {\n    <span class=\"hljs-string\">&quot;++&quot;</span> | <span class=\"hljs-string\">&quot;--&quot;</span>\n}\n</code></pre>","<p>An update (increment or decrement) operator token.</p>"]},"mdn":{"score":59.99883,"url":"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/operator"}},"Expressions/Binary operations/BinaryExpression":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">BinaryExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;BinaryExpression&quot;</span>;\n    <span class=\"hljs-attr\">operator</span>: <span class=\"hljs-title class_\">BinaryOperator</span>;\n    <span class=\"hljs-attr\">left</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">right</span>: <span class=\"hljs-title class_\">Expression</span>;\n}\n</code></pre>","<p>A binary operator expression.</p>"]},"mdn":{"score":51.778336,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function"}},"Expressions/Binary operations/BinaryExpression/BinaryOperator":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">enum <span class=\"hljs-title class_\">BinaryOperator</span> {\n    <span class=\"hljs-string\">&quot;==&quot;</span> | <span class=\"hljs-string\">&quot;!=&quot;</span> | <span class=\"hljs-string\">&quot;===&quot;</span> | <span class=\"hljs-string\">&quot;!==&quot;</span>\n         | <span class=\"hljs-string\">&quot;&lt;&quot;</span> | <span class=\"hljs-string\">&quot;&lt;=&quot;</span> | <span class=\"hljs-string\">&quot;&gt;&quot;</span> | <span class=\"hljs-string\">&quot;&gt;=&quot;</span>\n         | <span class=\"hljs-string\">&quot;&lt;&lt;&quot;</span> | <span class=\"hljs-string\">&quot;&gt;&gt;&quot;</span> | <span class=\"hljs-string\">&quot;&gt;&gt;&gt;&quot;</span>\n         | <span class=\"hljs-string\">&quot;+&quot;</span> | <span class=\"hljs-string\">&quot;-&quot;</span> | <span class=\"hljs-string\">&quot;*&quot;</span> | <span class=\"hljs-string\">&quot;/&quot;</span> | <span class=\"hljs-string\">&quot;%&quot;</span>\n         | <span class=\"hljs-string\">&quot;|&quot;</span> | <span class=\"hljs-string\">&quot;^&quot;</span> | <span class=\"hljs-string\">&quot;&amp;&quot;</span> | <span class=\"hljs-string\">&quot;in&quot;</span>\n         | <span class=\"hljs-string\">&quot;instanceof&quot;</span>\n}\n</code></pre>","<p>A binary operator token.</p>"]},"mdn":{"score":64.09538,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence"}},"Expressions/Binary operations/AssignmentExpression":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">AssignmentExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;AssignmentExpression&quot;</span>;\n    <span class=\"hljs-attr\">operator</span>: <span class=\"hljs-title class_\">AssignmentOperator</span>;\n    <span class=\"hljs-attr\">left</span>: <span class=\"hljs-title class_\">Pattern</span> | <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">right</span>: <span class=\"hljs-title class_\">Expression</span>;\n}\n</code></pre>","<p>An assignment operator expression.</p>"]},"mdn":{"score":52.70482,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function"}},"Expressions/Binary operations/AssignmentExpression/AssignmentOperator":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">enum <span class=\"hljs-title class_\">AssignmentOperator</span> {\n    <span class=\"hljs-string\">&quot;=&quot;</span> | <span class=\"hljs-string\">&quot;+=&quot;</span> | <span class=\"hljs-string\">&quot;-=&quot;</span> | <span class=\"hljs-string\">&quot;*=&quot;</span> | <span class=\"hljs-string\">&quot;/=&quot;</span> | <span class=\"hljs-string\">&quot;%=&quot;</span>\n        | <span class=\"hljs-string\">&quot;&lt;&lt;=&quot;</span> | <span class=\"hljs-string\">&quot;&gt;&gt;=&quot;</span> | <span class=\"hljs-string\">&quot;&gt;&gt;&gt;=&quot;</span>\n        | <span class=\"hljs-string\">&quot;|=&quot;</span> | <span class=\"hljs-string\">&quot;^=&quot;</span> | <span class=\"hljs-string\">&quot;&amp;=&quot;</span>\n}\n</code></pre>","<p>An assignment operator token.</p>"]},"mdn":{"score":60.94838,"url":"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/operator"}},"Expressions/Binary operations/LogicalExpression":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">LogicalExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;LogicalExpression&quot;</span>;\n    <span class=\"hljs-attr\">operator</span>: <span class=\"hljs-title class_\">LogicalOperator</span>;\n    <span class=\"hljs-attr\">left</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">right</span>: <span class=\"hljs-title class_\">Expression</span>;\n}\n</code></pre>","<p>A logical operator expression.</p>"]},"mdn":{"score":71.37319,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND"}},"Expressions/Binary operations/LogicalExpression/LogicalOperator":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">enum <span class=\"hljs-title class_\">LogicalOperator</span> {\n    <span class=\"hljs-string\">&quot;||&quot;</span> | <span class=\"hljs-string\">&quot;&amp;&amp;&quot;</span>\n}\n</code></pre>","<p>A logical operator token.</p>"]},"mdn":{"score":73.36029,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND"}},"Expressions/Binary operations/MemberExpression":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">MemberExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span>, <span class=\"hljs-title class_\">Pattern</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;MemberExpression&quot;</span>;\n    <span class=\"hljs-attr\">object</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">property</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">computed</span>: boolean;\n}\n</code></pre>","<p>A member expression. If <code>computed</code> is <code>true</code>, the node corresponds to a computed (<code>a[b]</code>) member expression and <code>property</code> is an <code>Expression</code>. If <code>computed</code> is <code>false</code>, the node corresponds to a static (<code>a.b</code>) member expression and <code>property</code> is an <code>Identifier</code>.</p>"]},"mdn":{"score":51.778336,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function"}},"Expressions/ConditionalExpression":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">ConditionalExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;ConditionalExpression&quot;</span>;\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">alternate</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">consequent</span>: <span class=\"hljs-title class_\">Expression</span>;\n}\n</code></pre>","<p>A conditional expression, i.e., a ternary <code>?</code>/<code>:</code> expression.</p>"]},"mdn":{"score":64.70663,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator"}},"Expressions/CallExpression":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">CallExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;CallExpression&quot;</span>;\n    <span class=\"hljs-attr\">callee</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">arguments</span>: [ <span class=\"hljs-title class_\">Expression</span> ];\n}\n</code></pre>","<p>A function or method call expression.</p>"]},"mdn":{"score":59.7198,"url":"https://developer.mozilla.org/en-US/docs/WebAssembly/Reference/Control_flow/call"}},"Expressions/NewExpression":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">NewExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;NewExpression&quot;</span>;\n    <span class=\"hljs-attr\">callee</span>: <span class=\"hljs-title class_\">Expression</span>;\n    <span class=\"hljs-attr\">arguments</span>: [ <span class=\"hljs-title class_\">Expression</span> ];\n}\n</code></pre>","<p>A <code>new</code> expression.</p>"]},"mdn":{"score":58.356384,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new"}},"Expressions/SequenceExpression":{"content":{"/es5.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">SequenceExpression</span> &lt;: <span class=\"hljs-title class_\">Expression</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;SequenceExpression&quot;</span>;\n    <span class=\"hljs-attr\">expressions</span>: [ <span class=\"hljs-title class_\">Expression</span> ];\n}\n</code></pre>","<p>A sequence expression, i.e., a comma-separated sequence of expressions.</p>"]},"mdn":{"score":54.283306,"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/::-moz-page-sequence"}},"Type Annotations":{"content":{"/extensions/type-annotations.md":["<pre><code class=\"language-js hljs\">interface <span class=\"hljs-title class_\">TypeAnnotation</span> &lt;: <span class=\"hljs-title class_\">Node</span> { }\n</code></pre>","<p>Any type annotation.</p>"]},"mdn":{"score":78.055824,"url":"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Annotations"}}}